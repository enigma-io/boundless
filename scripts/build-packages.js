/* eslint-disable no-sequences */
/* eslint-disable no-console */
/* eslint-disable no-fallthrough */

process.env.BABEL_ENV = 'development';

const fs = require('fs');
const path = require('path');
const mkdirp = require('mkdirp');
const webpack = require('webpack');
const stylus = require('stylus');
const chalk = require('chalk');
const extractComments = require('extract-comments');
const _ = require('lodash');

_.mixin({'pascalCase': _.flow(_.camelCase, _.upperFirst)});

const base = __dirname + '/../packages/';

const packages = fs.readdirSync(path.resolve(base)).filter((name) => {
    return !require(path.resolve(base, name, 'package.json')).private;
});

const log = (msg) => console.log(chalk.bold.green(msg));
const error = (err) => console.error(chalk.bold.red(err));

const baseExternals = {
    'classnames': {commonjs2: 'classnames'},
    'react': {commonjs2: 'react'},
    'react-dom': {commonjs2: 'react-dom'},
};

const docgen = require('react-docgen');
const componentReadmeTemplate = `
<!---
THIS IS AN AUTOGENERATED FILE. EDIT PACKAGES/<%= _.toUpper(name) %>/INDEX.JS INSTEAD.
-->
# <%= prettyName %>

<%= description %>

## Installation

\`\`\`bash
npm i <%= name %> --save
\`\`\`

Then use it like:

<% if (demoContent) { %>
\`\`\`jsx
<%= demoContent %>
\`\`\`
<% } else { %>
\`\`\`js
import <%= prettyName %> from '<%= name %>';
\`\`\`
<% } %>

<% if (name.indexOf('utils') === -1) { %>
<%= prettyName %> can also just be directly used from the main [Boundless library](https://www.npmjs.com/package/boundless). This is recommended when you're getting started to avoid maintaining the package versions of several components:

\`\`\`bash
npm i boundless --save
\`\`\`

the ES6 \`import\` statement then becomes like:

\`\`\`js
import { <%= prettyName %> } from 'boundless';
\`\`\`
<% } %>

<% if (props) { %>
## Props

> Note: only top-level props are in the README, for the full list check out the [website](http://boundless.js.org/<%= prettyName %>).

### Required Props
<%
    const requiredProps = _.pickBy(props, {required: true});

    if (_.size(requiredProps)) {
        const requiredPropsSortedKeys = _.sortBy(_.keys(requiredProps), [_.identity]);
        _.each(requiredPropsSortedKeys, function(propName) { %>
- __\`<%= propName %>\`__<% if (props[propName].description) { %> &middot; <%= _.lowerFirst(props[propName].description.replace(/\\n/g, '\\n  ')) %><% } %>

  Expects | Default Value
  -       | -
  \`<%= typeParser(props[propName].type) %>\` | \`<%= props[propName].defaultValue.value %>\`
<% }) } else { %>
There are no required props.
<% } %>

### Optional Props
<%
    const optionalProps = _.pickBy(props, {required: false});

    if (_.size(optionalProps)) {
        const optionalPropsSortedKeys = _.sortBy(_.keys(optionalProps), [_.identity]);
        _.each(optionalPropsSortedKeys, function(propName) { %>
- __\`<%= propName %>\`__<% if (props[propName].description) { %> &middot; <%= _.lowerFirst(props[propName].description.replace(/\\n/g, '\\n  ')) %><% } %>

  Expects | Default Value
  -       | -
  \`<%= typeParser(props[propName].type) %>\` | \`<%= _.get(props[propName], 'defaultValue.value', 'n/a') %>\`
<% }) } else { %>
There are no optional props.
<% } } %>
<% if (hasStyles) { %>
## Reference Styles
### Stylus
\`\`\`stylus
// Bring in Boundless's base Stylus variables
@require "node_modules/<%= name %>/variables"

// Redefine any variables as desired, e.g.
color-accent = royalblue

// Bring in the component styles; they will be autoconfigured based on the above
@require "node_modules/<%= name %>/style"
\`\`\`

### CSS
If desired, a precompiled plain CSS stylesheet is available for customization at \`/build/style.css\`, based on Boundless's [default variables](https://github.com/enigma-io/boundless/blob/master/variables.styl).
<% } %>
`.trim() + '\n';

const componentReadmeGenerator = _.template(componentReadmeTemplate);

/*
    the boundless bundle needs some browser globals, so we'll just spawn a shared instance of jsdom
    and load the standalone version of boundless into it; we need the built version of boundless since
    node can't handle es6 module syntax yet ;_;
 */
require('jsdom').env('', [
    'http://cdnjs.cloudflare.com/ajax/libs/react/15.4.2/react.min.js',
    'http://cdnjs.cloudflare.com/ajax/libs/react/15.4.2/react-dom.min.js',
    path.resolve(`${__dirname}/../public/boundless.min.js`),
], (jsdomErr, window) => {
    if (jsdomErr) {
        return error(jsdomErr);
    }

    const formatPropType = (type = {}) => {
        switch (type.name) {
        case 'arrayOf':
            if (type.value.name !== 'custom') {
                return `${type.name}(${formatPropType(type.value)})`;
            }

            return 'array';

        case 'element':
            return 'ReactElement';

        case 'enum':
            if (type.computed === true) {
                return _.keys(
                    _.get(window.Boundless, type.value, {})
                ).map((key) => `${type.value}.${key}`).join(' or ');
            } else if (Array.isArray(type.value)) {
                return _.map(type.value, 'value').join(' or ');
            }

            return `oneOf(${type.value})`;

        case 'func':
            return 'function';

        case 'instanceOf':
           return type.value;

        case 'node':
            return 'any renderable';

        case 'shape':
            return 'object';

        case 'union':
            return type.value.map((v) => formatPropType(v)).join(' or ');
        }

        return type.name;
    };

    packages.forEach((name) => {
        const reactDemoPath = path.resolve(base, name, 'demo', 'index.js');
        const vanillaDemoPath = path.resolve(base, name, 'demo.js');
        const entryPath = path.resolve(base, name, 'index.js');
        const jsonPath = path.resolve(base, name, 'package.json');
        const readmePath = path.resolve(base, name, 'README.md');
        const stylePath = path.resolve(base, name, 'style.styl');

        let coalesced = {};

        if (name.indexOf('-utils') === -1) {
            const seedDocgen = docgen.parse(fs.readFileSync(entryPath));

            // assembles the props from composed components all the way down the chain
            coalesced = seedDocgen;

            const stack = seedDocgen.composes || [];

            while (stack.length) {
                if (stack[0].indexOf('boundless-') !== -1) {
                    // comes back like "boundless-whatever"
                    const componentDocgen = docgen.parse(
                        fs.readFileSync(
                            path.resolve(base, stack[0], 'index.js')
                        )
                    );

                    coalesced.props = _.merge({}, coalesced.props, componentDocgen.props);

                    if (componentDocgen.composes) {
                        stack.push.apply(stack, componentDocgen.composes);
                    }
                }

                stack.shift();
            }

            coalesced.prettyName = _.pascalCase(name.replace('boundless-', ''));
        } else {
            const extracted = extractComments(fs.readFileSync(entryPath, 'utf8'))[0];

            coalesced.description = (extracted && extracted.value ? extracted.value : require(jsonPath).description).trim();
            coalesced.prettyName = _.camelCase(name.replace('boundless-utils-', ''));
            coalesced.props = null;
        }

        let demoContent;

        if (fs.existsSync(reactDemoPath)) {
            demoContent = fs.readFileSync(reactDemoPath, 'utf8');
        } else if (fs.existsSync(vanillaDemoPath)) {
            demoContent = fs.readFileSync(vanillaDemoPath, 'utf8');
        }

        if (demoContent) {
            // simulate actually importing the modules from NPM
            demoContent = demoContent.replace(/from '(?:\.\.?\/){1,}(.*?)'/g, (x, match) => {
                return `from '${match === 'index' ? name : match.replace('/index', '')}'`;
            });

            demoContent = demoContent.trim();
        }

        const hasStyles = fs.existsSync(stylePath);

        fs.writeFileSync(readmePath, componentReadmeGenerator(
            _.merge({}, coalesced, {
                demoContent,
                hasStyles,
                name,
                typeParser: formatPropType,
            })
        ));

        log(`BUILT README - ${name}`);

        mkdirp.sync(path.join(base, name, 'build'));

        if (hasStyles) {
            stylus(fs.readFileSync(stylePath, 'utf8'))
                .set('filename', stylePath)
                .set('sourcemap', {inline: true})
                .render((err, css) => {
                    if (err) {
                        return error(`ERROR CSS - ${name} CSS. ${err}`);
                    }

                    fs.writeFileSync(path.resolve(base, name, 'build', 'style.css'), css);
                    log(`BUILT CSS - ${name}`);
                });
        }

        const dependencies = Object.keys(require(jsonPath).dependencies || {});
        const externals = _.merge({}, baseExternals, dependencies.reduce((map, depName) => {
            return (map[depName] = {commonjs2: depName}), map;
        }, {}));

        webpack({
            entry: entryPath,
            devtool: 'inline-source-map',
            externals: externals,
            module: {
                rules: [{
                    test: /\.jsx?$/,
                    loader: 'babel-loader',
                }],
            },
            output: {
                filename: 'index.js',
                libraryTarget: 'commonjs2',
                path: path.resolve(base, name, 'build'),
            },
            plugins: [
                new webpack.optimize.UglifyJsPlugin({
                    comments: false,
                    compress: true,
                    sourceMap: true,
                }),
            ],
            target: 'node',
        }, (webpackErr) => {
            if (webpackErr) {
                return error(`ERROR JS - ${name} Error: ${webpackErr}`);
            }

            log(`BUILT JS - ${name}`);
        });
    });
});
