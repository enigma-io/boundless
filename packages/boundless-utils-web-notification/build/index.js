module.exports=function(n){function t(i){if(o[i])return o[i].exports;var e=o[i]={i:i,l:!1,exports:{}};return n[i].call(e.exports,e,e.exports,t),e.l=!0,e.exports}var o={};return t.m=n,t.c=o,t.i=function(n){return n},t.d=function(n,o,i){t.o(n,o)||Object.defineProperty(n,o,{configurable:!1,enumerable:!0,get:i})},t.n=function(n){var o=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(o,"a",o),o},t.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},t.p="",t(t.s=0)}([function(n,t,o){"use strict";function i(){return new Promise(function(n,t){f.requestPermission(function(o){"granted"===o&&n(),t(c.DISABLED)})})}function e(){return new Promise(function(n,t){if(!f)return t(c.NOT_AVAILABLE);if("permission"in f){switch(f.permission){case"granted":return n();case"denied":return t(c.DISABLED)}i().then(n,t)}})}function r(n){return new Promise(function(t,o){return void 0===n?o(c.CONFIG_MISSING):"[object Object]"!==Object.prototype.toString.call(n)?o(c.CONFIG_TYPE):void 0===n.body?o(c.BODY_MISSING):a(n.body)===!1?o(c.BODY_TYPE):void 0===n.header?o(c.HEADER_MISSING):a(n.header)===!1?o(c.HEADER_TYPE):void 0!==n.icon&&a(n.icon)===!1?o(c.ICON_TYPE):void 0!==n.onClick&&u(n.onClick)===!1?o(c.ONCLICK_TYPE):void e().then(function(){var o=new f(n.header,{body:n.body,icon:n.icon});n.onClick&&o.addEventListener("click",n.onClick),t(o)},function(n){return o(n)})})}Object.defineProperty(t,"__esModule",{value:!0}),o.d(t,"errors",function(){return c}),t.default=r;var c={DISABLED:"webNotification: web notifications are currently disabled by user settings.",NOT_AVAILABLE:"webNotification: web notifications are not supported on this platform.",CONFIG_TYPE:"webNotification: passed a non-object as configuration.",CONFIG_MISSING:"webNotification: no configuration was passed.",BODY_TYPE:"webNotification: `body` must be a string.",BODY_MISSING:"webNotification: `body` was omitted from the configuration object.",HEADER_TYPE:"webNotification: `header` must be a string.",HEADER_MISSING:"webNotification: `header` was omitted from the configuration object.",ICON_TYPE:"webNotification: `icon` must be a URL string.",ONCLICK_TYPE:"webNotification: `onClick` must be a function."},u=function(n){return"function"==typeof n},a=function(n){return"string"==typeof n},f=function(){return!!window.Notification&&window.Notification}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,