module.exports=function(e){function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var r={};return t.m=e,t.c=r,t.i=function(e){return e},t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=7)}([function(e,t){e.exports=require("boundless-dialog")},function(e,t){e.exports=require("boundless-portal")},function(e,t){e.exports=require("boundless-utils-omit-keys")},function(e,t){e.exports=require("boundless-utils-transform-property")},function(e,t){e.exports=require("classnames")},function(e,t){e.exports=require("react")},function(e,t){e.exports=require("react-dom")},function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e){switch(e[0]){case"N":return"S";case"S":return"N";case"E":return"W"}return"E"}function c(e,t){return e.filter(function(e){return t.indexOf(e)===-1})}Object.defineProperty(t,"__esModule",{value:!0});var s=r(5),p=(r.n(s),r(6)),h=(r.n(p),r(4)),l=r.n(h),u=r(0),d=r.n(u),f=r(1),y=r.n(f),g=r(2),m=r.n(g),x=r(3),v=r.n(x),w=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},b=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),R=/\s?b-popover-(anchor|self)-(start|middle|end)/g,P=r.i(s.createElement)("svg",{viewBox:"0 0 14 9.5",xmlns:"http://www.w3.org/2000/svg"},r.i(s.createElement)("g",null,r.i(s.createElement)("polygon",{className:"b-popover-caret-border",fill:"#000",points:"7 0 14 10 0 10"}),r.i(s.createElement)("polygon",{className:"b-popover-caret-fill",fill:"#FFF",points:"6.98230444 1.75 12.75 10 1.25 10"}))),N=0,E=1,O=2,W=[{name:"NNW",ax:N,ay:N,dx:N,dy:O},{name:"N",ax:E,ay:N,dx:E,dy:O},{name:"NNE",ax:O,ay:N,dx:O,dy:O},{name:"ENE",ax:O,ay:N,dx:N,dy:N},{name:"E",ax:O,ay:E,dx:N,dy:E},{name:"ESE",ax:O,ay:O,dx:N,dy:O},{name:"SSE",ax:O,ay:O,dx:O,dy:N},{name:"S",ax:E,ay:O,dx:E,dy:N},{name:"SSW",ax:N,ay:O,dx:N,dy:N},{name:"WSW",ax:N,ay:O,dx:O,dy:O},{name:"W",ax:N,ay:E,dx:O,dy:E},{name:"WNW",ax:N,ay:N,dx:O,dy:N}],T=function(e){function t(){var e,i,a,c;n(this,t);for(var s=arguments.length,h=Array(s),l=0;l<s;l++)h[l]=arguments[l];return i=a=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(h))),a.align=function(){var e=a.props.anchor instanceof HTMLElement?a.props.anchor:r.i(p.findDOMNode)(a.props.anchor),n=a.props.caretAnchor?a.props.caretAnchor instanceof HTMLElement?a.props.caretAnchor:r.i(p.findDOMNode)(a.props.caretAnchor):e;a.cacheViewportCartography(e,n);var o=a.getValidAlignmentPreset(),i=t.getAlignmentClassFragment;a.dialog.$wrapper.className=a.dialog.$wrapper.className.replace(R,"")+(" b-popover-anchor-x-"+i(o.ax))+(" b-popover-anchor-y-"+i(o.ay))+(" b-popover-self-x-"+i(o.dx))+(" b-popover-self-y-"+i(o.dy));var c=Math.round(a.getNextDialogXPosition(o)),s=Math.round(a.getNextDialogYPosition(o));a.dialog.$wrapper.style[v.a]="translate("+c+"px, "+s+"px)";var h=o.name[0],l="N"===h||"S"===h;a.$caret.style[l?"left":"top"]=Math.round(a.getNextCaretXPosition(o))+"px",a.$caret.style[l?"top":"left"]="0px"},c=i,o(a,c)}return i(t,e),b(t,[{key:"cacheViewportCartography",value:function(e,t){var r=document.body.getBoundingClientRect();this.anchorRect=e.getBoundingClientRect(),this.caretAnchorRect=t.getBoundingClientRect(),this.bodyLeft=r.left*-1,this.bodyTop=r.top*-1}},{key:"getNextCaretXPosition",value:function(e){var t=e.name,r=(e.ax,e.dx),n=(e.ay,e.dy),o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.$caret,i=0;return"N"===t[0]||"S"===t[0]?(i=this.caretAnchorRect.left-this.anchorRect.left+this.caretAnchorRect.width/2,r===E?i+=(this.dialog.$wrapper.clientWidth-this.anchorRect.width)/2:r===O&&(i+=this.dialog.$wrapper.clientWidth-this.anchorRect.width)):(i=this.caretAnchorRect.top-this.anchorRect.top+this.caretAnchorRect.height/2,n===E?i+=(this.dialog.$wrapper.clientHeight-this.anchorRect.height)/2:n===O&&(i+=this.dialog.$wrapper.clientHeight-this.anchorRect.height)),i-=o.clientWidth/2}},{key:"getNextDialogXPosition",value:function(e){var t=e.ax,r=e.dx,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.dialog.$wrapper,o=this.anchorRect.left+this.bodyLeft;switch(t){case E:o+=this.anchorRect.width/2;break;case O:o+=this.anchorRect.width}switch(r){case E:o-=n.clientWidth/2;break;case O:o-=n.clientWidth}return o}},{key:"getNextDialogYPosition",value:function(e){var t=e.ay,r=e.dy,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.dialog.$wrapper,o=this.anchorRect.top+this.bodyTop;switch(t){case E:o+=this.anchorRect.height/2;break;case O:o+=this.anchorRect.height}switch(r){case E:o-=n.clientHeight/2;break;case O:o-=n.clientHeight}return o}},{key:"isPositionValid",value:function(e,t,r){var n=e.name,o=e.ax,i=e.ay,a=(e.dx,e.dy,n[0]);return"N"===a||"S"===a?!("N"===a&&this.anchorRect.top-t<0)&&(!("S"===a&&this.anchorRect.bottom+t>window.innerHeight)&&(o===N?!(this.anchorRect.left+r>window.innerWidth||this.anchorRect.left<0):o===E?!(this.anchorRect.left-r/2<0||this.anchorRect.left+r/2>window.innerWidth):!(this.anchorRect.left-r<0||this.anchorRect.right>window.innerWidth))):"W"!==a&&"E"!==a||!("W"===a&&this.anchorRect.left-r<0)&&(!("E"===a&&this.anchorRect.right+r>window.innerWidth)&&(i===N?!(this.anchorRect.top+t>window.innerHeight||this.anchorRect.top<0):i===E?!(this.anchorRect.top+this.anchorRect.height/2-t/2<0||this.anchorRect.top+this.anchorRect.height/2+t/2>window.innerHeight):!(this.anchorRect.top-t<0||this.anchorRect.bottom>window.innerHeight)))}},{key:"getValidAlignmentPreset",value:function(){var e=this,t=this.dialog.$wrapper.clientWidth,r=this.dialog.$wrapper.clientHeight,n=W.filter(function(n){return e.isPositionValid(n,r,t)});if(n.indexOf(this.props.preset)!==-1||!this.props.autoReposition||!n.length)return this.props.preset;var o=n.filter(function(t){var r=t.name;return r[0]===e.props.preset.name[0]});if(o.length)return o[0];var i=a(this.props.preset.name),c=n.filter(function(e){var t=e.name;return t[0]===i});return c.length?c[0]:n[0]}},{key:"componentDidMount",value:function(){this.align(),window.addEventListener("resize",this.align,!0)}},{key:"componentDidUpdate",value:function(){this.align()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.align,!0)}},{key:"render",value:function(){var e=this,n=this.props;return r.i(s.createElement)(y.a,n.portalProps,r.i(s.createElement)(d.a,w({},m()(n,t.internalKeys),{ref:function(t){return e.dialog=t},before:r.i(s.cloneElement)(n.caretComponent,{ref:function(t){return e.$caret=t},className:l()("b-popover-caret",n.caretComponent.props.className)}),className:l()("b-popover",n.className)})))}}],[{key:"getAlignmentClassFragment",value:function(e){switch(e){case N:return"start";case E:return"middle";case O:return"end"}}}]),t}(s.PureComponent);T.preset=W.reduce(function(e,t){return e[t.name]=t,e},{}),T.propTypes=w({},d.a.propTypes,{anchor:s.PropTypes.oneOfType([s.PropTypes.instanceOf(HTMLElement),s.PropTypes.shape({props:s.PropTypes.object})]).isRequired,autoReposition:s.PropTypes.bool,caretAnchor:s.PropTypes.oneOfType([s.PropTypes.instanceOf(HTMLElement),s.PropTypes.shape({props:s.PropTypes.object})]),caretComponent:s.PropTypes.element,portalProps:s.PropTypes.shape(y.a.PropTypes),preset:s.PropTypes.oneOf([T.preset.NNW,T.preset.N,T.preset.NNE,T.preset.ENE,T.preset.E,T.preset.ESE,T.preset.SSE,T.preset.S,T.preset.SSW,T.preset.WSW,T.preset.W,T.preset.WNW])}),T.defaultProps=w({},d.a.defaultProps,{anchor:void 0,autoReposition:!0,captureFocus:!1,caretAnchor:void 0,caretComponent:P,closeOnEscKey:!0,closeOnOutsideClick:!0,closeOnOutsideScroll:!0,portalProps:{},preset:T.preset.S}),T.internalKeys=c(Object.keys(T.defaultProps),d.a.internalKeys),t.default=T}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,