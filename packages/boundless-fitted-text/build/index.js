module.exports=function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:o})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=4)}([function(e,t){e.exports=require("boundless-utils-omit-keys")},function(e,t){e.exports=require("classnames")},function(e,t){e.exports=require("react")},function(e,t){e.exports=require("react-dom")},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e){return parseInt(e,10)}function a(e){var t=n.i(l.findDOMNode)(e),o=window.getComputedStyle(t.parentNode),r=u(window.getComputedStyle(t).fontSize);null===e.baseFontSize&&(e.baseFontSize=r);var i=u(o.height),a=u(o.width);"border-box"!==o.boxSizing&&"padding-box"!==o.boxSizing||(i-=u(o.paddingTop)+u(o.paddingBottom),a-=u(o.paddingLeft)+u(o.paddingRight));var s=Math.floor(r/t.offsetHeight*i),p=Math.floor(r/t.offsetWidth*a);e.props.upscale?t.style.fontSize=(Math.max(s,p)||1)+"px":t.style.fontSize=(Math.min(e.baseFontSize,s,p)||1)+"px"}function s(){v.forEach(function(e){return a(e)})}function p(e){0===v.length&&window.addEventListener("resize",s,!0),v.push(e)}function c(e){v.splice(v.indexOf(e),1),0===v.length&&window.removeEventListener("resize",s,!0)}Object.defineProperty(t,"__esModule",{value:!0});var f=n(2),l=(n.n(f),n(3)),d=(n.n(l),n(1)),y=n.n(d),h=n(0),b=n.n(h),m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},g=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),v=[],x=function(e){function t(){var e,n,i,u;o(this,t);for(var a=arguments.length,s=Array(a),p=0;p<a;p++)s[p]=arguments[p];return n=i=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),i.baseFontSize=null,u=n,r(i,u)}return i(t,e),g(t,[{key:"componentDidMount",value:function(){a(this),p(this)}},{key:"componentDidUpdate",value:function(){a(this)}},{key:"componentWillUnmount",value:function(){c(this)}},{key:"render",value:function(){return n.i(f.createElement)(this.props.component,m({},b()(this.props,t.internalKeys),{className:y()("b-text",this.props.className)}),this.props.children)}}]),t}(f.PureComponent);x.propTypes={"*":f.PropTypes.any,component:f.PropTypes.string,upscale:f.PropTypes.bool},x.defaultProps={component:"span",upscale:!1},x.internalKeys=Object.keys(x.defaultProps),t.default=x}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,