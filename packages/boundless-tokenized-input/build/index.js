module.exports=function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:o})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=5)}([function(e,t){e.exports=require("boundless-typeahead")},function(e,t){e.exports=require("boundless-utils-object-intersection")},function(e,t){e.exports=require("boundless-utils-omit-keys")},function(e,t){e.exports=require("classnames")},function(e,t){e.exports=require("react")},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=n(4),l=(n.n(i),n(3)),p=n.n(l),c=n(0),u=n.n(c),a=n(1),f=n.n(a),h=n(2),d=n.n(h),k=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},y=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),v=function(e){return e[0]},b=function(e){return e[e.length-1]},T=function(e){return"function"==typeof e},m=function(e){function t(){var e,n,s,i;o(this,t);for(var l=arguments.length,p=Array(l),c=0;c<l;c++)p[c]=arguments[c];return n=s=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(p))),s.focus=function(){return s.refs.typeahead.focus()},s.getInputNode=function(){return s.refs.typeahead.getInputNode()},s.getSelectedEntityText=function(){return s.refs.typeahead.getSelectedEntityText()},s.getValue=function(){return s.refs.typeahead.getValue()},s.select=function(){return s.refs.typeahead.select()},s.setValue=function(e){return s.refs.typeahead.setValue(e)},s.add=function(e){s.props.tokens.indexOf(e)===-1&&s.props.handleAddToken(e)},s.handleInputClick=function(e){s.clearSelection(),T(s.props.inputProps.onClick)&&s.props.inputProps.onClick(e)},s.handleInputFocus=function(e){s.clearSelection(),T(s.props.inputProps.onFocus)&&s.props.inputProps.onFocus(e)},s.handleKeyDown=function(e){switch(e.which){case 37:s.selectPreviousToken(e.shiftKey);break;case 39:s.selectNextToken(e.shiftKey);break;case 8:s.props.tokensSelected.length&&(s.remove(s.props.tokensSelected),s.focus());break;case 65:e.metaKey&&(e.preventDefault(),s.focus(),s.select(),s._suppressNextTokenSelection=!0,s.props.handleNewSelection(s.props.tokens))}T(s.props.onKeyDown)&&s.props.onKeyDown(e)},i=n,r(s,i)}return s(t,e),y(t,[{key:"componentDidUpdate",value:function(e){var t=e.tokensSelected,n=this.props.tokensSelected;if(this.props.tokens.length>e.tokens.length&&this.setValue(""),this._suppressNextTokenSelection)return void(this._suppressNextTokenSelection=!1);if(t!==n&&0!==n.length){if(1===n.length||n[0]!==t[0])return this.refs["token_"+n[0]].focus();if(b(n)!==b(t))return this.refs["token_"+b(n)].focus();this.refs["token_"+n[0]].focus()}}},{key:"remove",value:function(e){var t=this,n=(Array.isArray(e)?e:[e]).filter(function(e){return t.props.tokens.indexOf(e)!==-1});n.length&&this.props.handleRemoveTokens(n)}},{key:"selectToken",value:function(e){this.props.handleNewSelection([e])}},{key:"selectTokens",value:function(e){this.props.handleNewSelection(e)}},{key:"selectPreviousToken",value:function(e){var t=this.props.tokensSelected,n=this.props.tokens;if(1!==t.length||v(t)!==v(n))if(0===t.length)this.selectToken(b(n));else{var o=n[n.indexOf(v(t))-1];this.selectTokens(e?[o].concat(t):[o])}}},{key:"selectNextToken",value:function(e){var t=this.props.tokensSelected,n=this.props.tokens;if(0!==t.length)if(b(t)===b(n))this.clearSelection(),this.focus();else{var o=n[n.indexOf(b(t))+1];this.selectTokens(e?t.concat(o):[o])}}},{key:"clearSelection",value:function(){this.props.handleNewSelection([])}},{key:"handleTokenCloseClick",value:function(e,t){t.stopPropagation(),this.remove(e),this.focus(),this.props.tokenCloseComponent.props.onClick&&this.props.tokenCloseComponent.props.onClick(t)}},{key:"renderTokenClose",value:function(e){if(this.props.tokenCloseVisible)return n.i(i.cloneElement)(this.props.tokenCloseComponent,{className:p()("b-tokenfield-token-close",this.props.tokenCloseComponent.props.className),onClick:this.handleTokenCloseClick.bind(this,e)})}},{key:"handleTokenKeyDown",value:function(e,t){switch(t.which){case 13:case 32:this.selectToken(e),t.preventDefault();break;case 8:this.remove(e),this.focus(),t.preventDefault()}}},{key:"renderTokens",value:function(){var e=this;return n.i(i.createElement)("div",{className:"b-tokenfield-tokens",role:"listbox"},this.props.tokens.map(function(t){return n.i(i.createElement)("div",{ref:"token_"+t,key:t,className:p()("b-tokenfield-token",{"b-tokenfield-token-selected":e.props.tokensSelected.indexOf(t)!==-1}),onClick:e.selectToken.bind(e,t),onKeyDown:e.handleTokenKeyDown.bind(e,t),role:"option",tabIndex:"0"},e.props.entities[t].text,e.renderTokenClose(t))}))}},{key:"render",value:function(){return n.i(i.createElement)("div",k({},d()(this.props,t.internalKeys),{ref:"wrapper",className:p()("b-tokenfield-wrapper",this.props.className),onKeyDown:this.handleKeyDown}),this.renderTokens(),n.i(i.createElement)(u.a,k({},f()(this.props,u.a.defaultProps),{ref:"typeahead",className:"b-tokenfield",clearOnSelection:!0,inputProps:k({},this.props.inputProps,{onClick:this.handleInputClick,onFocus:this.handleInputFocus}),onEntitySelected:this.add})))}}]),t}(i.PureComponent);m.propTypes=k({},u.a.propTypes,{handleAddToken:i.PropTypes.func,handleRemoveTokens:i.PropTypes.func,handleNewSelection:i.PropTypes.func,tokenCloseComponent:i.PropTypes.element,tokenCloseVisible:i.PropTypes.bool,tokens:i.PropTypes.arrayOf(i.PropTypes.number),tokensSelected:i.PropTypes.arrayOf(i.PropTypes.number)}),m.defaultProps=k({},u.a.defaultProps,{handleAddToken:function(){},handleRemoveTokens:function(){},handleNewSelection:function(){},tokenCloseComponent:n.i(i.createElement)("div",null,"X"),tokenCloseVisible:!0,tokens:[],tokensSelected:[]}),m.internalKeys=Object.keys(m.defaultProps),t.default=m}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,