module.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=4)}([function(e,t){e.exports=require("boundless-utils-omit-keys")},function(e,t){e.exports=require("boundless-utils-uuid")},function(e,t){e.exports=require("react")},function(e,t){e.exports=require("react-dom")},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=n(2),c=(n.n(a),n(3)),u=(n.n(c),n(0)),l=n.n(u),d=n(1),p=n.n(d),h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},f=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),v="data-focus-index",m="data-focus-skip",y=function(e){function t(){var e,r,s,u;o(this,t);for(var l=arguments.length,d=Array(l),p=0;p<l;p++)d[p]=arguments[p];return r=s=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(d))),s.state={activeChildIndex:s.props.defaultActiveChildIndex,children:[]},s.handleKeyDown=function(e){switch(e.key){case"ArrowUp":s.props.mode!==t.mode.VERTICAL&&s.props.mode!==t.mode.BOTH||(e.preventDefault(),s.moveFocus(-1));break;case"ArrowLeft":s.props.mode!==t.mode.HORIZONTAL&&s.props.mode!==t.mode.BOTH||(e.preventDefault(),s.moveFocus(-1));break;case"ArrowDown":s.props.mode!==t.mode.VERTICAL&&s.props.mode!==t.mode.BOTH||(e.preventDefault(),s.moveFocus(1));break;case"ArrowRight":s.props.mode!==t.mode.HORIZONTAL&&s.props.mode!==t.mode.BOTH||(e.preventDefault(),s.moveFocus(1))}s.props.onKeyDown&&s.props.onKeyDown(e)},s.handleFocus=function(e){if(e.target.hasAttribute(v)){var t=parseInt(e.target.getAttribute(v),10),n=a.Children.toArray(s.state.children)[t];s.setState({activeChildIndex:t}),n.props.onFocus&&n.props.onFocus(e)}},s.persistWrapperElementReference=function(e){s.$wrapper=e instanceof HTMLElement?e:n.i(c.findDOMNode)(e)},u=r,i(s,u)}return s(t,e),f(t,[{key:"getFilteredChildren",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props;return a.Children.toArray(e.children).filter(Boolean)}},{key:"setActiveChildIndex",value:function(){if(0!==this.state.activeChildIndex){var e=a.Children.count(this.state.children);0===e?this.setState({activeChildIndex:0}):this.state.activeChildIndex>=e&&this.setState({activeChildIndex:e-1})}}},{key:"componentWillMount",value:function(){this.setState({children:this.getFilteredChildren()})}},{key:"componentWillReceiveProps",value:function(e){return e.children!==this.props.children?this.setState({children:this.getFilteredChildren(e)},this.setActiveChildIndex):void this.setActiveChildIndex()}},{key:"componentDidUpdate",value:function(e,t){this.state.activeChildIndex!==t.activeChildIndex&&this.setFocus(this.state.activeChildIndex)}},{key:"setFocus",value:function(e){var t=this.$wrapper.children[e];t&&t.hasAttribute(m)?this.moveFocus(t.compareDocumentPosition(document.activeElement)&Node.DOCUMENT_POSITION_FOLLOWING?-1:1):t&&document.activeElement!==t&&t.focus()}},{key:"moveFocus",value:function(e){var t=this.state.children?a.Children.count(this.state.children):0,n=this.state.activeChildIndex+e;n>=t?n=0:n<0&&(n=t-1),this.setState({activeChildIndex:n})}},{key:"renderChildren",value:function(){var e=this;return a.Children.map(this.state.children,function(t,o){var i;return n.i(a.cloneElement)(t,(i={},r(i,v,o),r(i,m,parseInt(t.props.tabIndex,10)===-1||void 0),r(i,"key",t.key||o),r(i,"tabIndex",e.state.activeChildIndex===o?0:-1),i))})}},{key:"render",value:function(){return n.i(a.createElement)(this.props.component,h({},l()(this.props,t.internalKeys),{ref:this.persistWrapperElementReference,onFocus:this.handleFocus,onKeyDown:this.handleKeyDown}),this.renderChildren())}}]),t}(a.PureComponent);y.mode={HORIZONTAL:p()(),VERTICAL:p()(),BOTH:p()()},y.propTypes={"*":a.PropTypes.any,component:a.PropTypes.oneOfType([a.PropTypes.string,a.PropTypes.func]),defaultActiveChildIndex:a.PropTypes.number,mode:a.PropTypes.oneOf([y.mode.BOTH,y.mode.HORIZONTAL,y.mode.VERTICAL])},y.defaultProps={component:"div",defaultActiveChildIndex:0,mode:y.mode.BOTH,onKeyDown:function(){}},y.internalKeys=Object.keys(y.defaultProps),t.default=y}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,