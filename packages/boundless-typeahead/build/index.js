module.exports=function(e){function t(r){if(n[r])return n[r].exports;var s=n[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,t),s.l=!0,s.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=7)}([function(e,t){e.exports=require("boundless-input")},function(e,t){e.exports=require("boundless-utils-object-intersection")},function(e,t){e.exports=require("boundless-utils-omit-keys")},function(e,t){e.exports=require("boundless-utils-uuid")},function(e,t){e.exports=require("classnames")},function(e,t){e.exports=require("escape-string-regexp")},function(e,t){e.exports=require("react")},function(e,t,n){"use strict";function r(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=n(6),p=(n.n(a),n(4)),c=n.n(p),u=n(5),l=n.n(u),h=n(0),d=n.n(h),f=n(1),y=n.n(f),m=n(2),g=n.n(m),v=n(3),x=n.n(v),b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},T=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),E=function(e){return"function"==typeof e},P=function(e){return"string"==typeof e},k=function(){},I=function(e){function t(){var e,n,r,o;s(this,t);for(var a=arguments.length,p=Array(a),c=0;c<a;c++)p[c]=arguments[c];return n=r=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(p))),M.call(r),o=n,i(r,o)}return o(t,e),T(t,[{key:"componentWillMount",value:function(){(this.props.inputProps.value||this.props.inputProps.defaultValue)&&this.computeMatches()}},{key:"componentDidMount",value:function(){this.mounted=!0,this.state.selectedEntityIndex>=0&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillReceiveProps",value:function(e){e.entities!==this.props.entities&&this.computeMatches(e.entities),e.inputProps.value!==this.props.inputProps.value&&(this.updateInputState(e.inputProps.value),this.computeMatches())}},{key:"componentDidUpdate",value:function(e,t){this.state.entityMatchIndexes.length&&!t.entityMatchIndexes.length&&(this.refs.matches.scrollTop=0),this.state.selectedEntityIndex>=0&&this.props.entities[this.state.selectedEntityIndex]!==e.entities[t.selectedEntityIndex]&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"handleMatchClick",value:function(e){this.setState({selectedEntityIndex:e},this.setValueWithSelectedEntity)}},{key:"selectMatch",value:function(e){var t=this.state.entityMatchIndexes,n=t.length,r=t.indexOf(this.state.selectedEntityIndex)+e;if(n){r<0?r=n-1:r>=n&&(r=0);var s=t[r],i=this.refs.matches,o=i.scrollTop+i.clientHeight,a=this.refs["match_$"+s],p=a.offsetTop,c=p+a.clientHeight;c>=o?i.scrollTop+=c-o:p<=i.scrollTop&&(i.scrollTop=p),this.setState({selectedEntityIndex:s})}}},{key:"cursorAtEndOfInput",value:function(){var e=this.getInputNode();return e.selectionStart===e.selectionEnd&&e.selectionEnd===this.getValue().length}},{key:"markFuzzyMatchSubstring",value:function(e,t){for(var r=t.text,s=r.split(new RegExp("("+l()(e)+")","ig")),i=e.toLowerCase(),o=s.length,p=-1;++p<o;)s[p].toLowerCase()===i&&(s[p]=n.i(a.createElement)("mark",{key:p,className:"b-typeahead-match-highlight"},s[p]));return s}},{key:"markStartsWithMatchSubstring",value:function(e,t){var r=t.text,s=e.toLowerCase(),i=r.toLowerCase().indexOf(s),o=i+s.length;return[n.i(a.createElement)("span",{key:"0"},r.slice(0,i)),n.i(a.createElement)("mark",{key:"1",className:"b-typeahead-match-highlight"},r.slice(i,o)),n.i(a.createElement)("span",{key:"2"},r.slice(o))]}},{key:"getMarkingFunction",value:function(){return P(this.props.algorithm)?this.props.algorithm===t.mode.STARTS_WITH?this.markStartsWithMatchSubstring:this.markFuzzyMatchSubstring:E(this.props.algorithm.marker)?this.props.algorithm.marker:(void 0===this.warnedMarker&&(this.warnedMarker=!0,console.warn("Typeahead: no `props.algorithm.marker` was provided; falling back to the default marking algorithm (FUZZY).")),this.markFuzzyMatchSubstring)}},{key:"getFuzzyMatchIndexes",value:function(e,t){var n=e.toLowerCase();return t.reduce(function(e,t,r){return t.text.toLowerCase().indexOf(n)!==-1?e.push(r)&&e:e},[])}},{key:"getStartsWithMatchIndexes",value:function(e,t){var n=e.toLowerCase();return t.reduce(function(e,t,r){return 0===t.text.toLowerCase().indexOf(n)&&e.push(r),e},[])}},{key:"getMatchingFunction",value:function(){return P(this.props.algorithm)?this.props.algorithm===t.mode.STARTS_WITH?this.getStartsWithMatchIndexes:this.getFuzzyMatchIndexes:E(this.props.algorithm.matcher)?this.props.algorithm.matcher:(void 0===this.warnedMatcher&&(this.warnedMatcher=!0,console.warn("Typeahead: no `props.algorithm.matcher` was provided; falling back to the default matching algorithm (FUZZY).")),this.getFuzzyMatchIndexes)}},{key:"computeMatches",value:function(e){var t=this;this.setState(function(n,r){var s=e||r.entities,i=n.input,o=""===i?[]:t.getMatchIndexes(i,s);return{selectedEntityIndex:o.length?o[0]:-1,entityMatchIndexes:o}})}},{key:"renderNotification",value:function(){return n.i(a.createElement)("div",{ref:"aria",id:this.state.id,className:this.props.offscreenClass,"aria-live":"polite",role:"status"},this.getSelectedEntityText())}},{key:"renderHint",value:function(){if(this.props.hint){var e=this.state.input,t=this.getSelectedEntityText(),r="";return t&&0===t.toLowerCase().indexOf(e.toLowerCase())&&(r=t.replace(new RegExp(e,"i"),e)),n.i(a.createElement)("div",b({},this.props.hintProps,{ref:"hint",className:c()("b-input","b-input-placeholder","b-typeahead-hint",this.props.hintProps.className),tabIndex:"-1"}),r)}}},{key:"renderMatches",value:function(){var e=this;if(this.state.entityMatchIndexes.length){var t=this.props.matchWrapperProps;return n.i(a.createElement)("div",b({},t,{ref:"matches",className:c()("b-typeahead-match-wrapper",t.className),role:"listbox"}),this.state.entityMatchIndexes.map(function(t){var s=e.props.entities[t],i=s.className,o=s.text,p=r(s,["className","text"]);return n.i(a.createElement)("div",b({},p,{ref:"match_$"+t,className:c()("b-typeahead-match",i,{"b-typeahead-match-selected":e.state.selectedEntityIndex===t}),key:o,onClick:e.handleMatchClick.bind(e,t),role:"option"}),e.markMatchSubstring(e.state.input,s))}))}}},{key:"render",value:function(){var e=this.props,r=this.state;return n.i(a.createElement)("div",b({},g()(e,t.internalKeys),{ref:"wrapper",className:c()("b-typeahead-wrapper",e.className),onKeyDown:this.handleKeyDown}),this.renderNotification(),this.renderHint(),n.i(a.createElement)(d.a,b({},y()(e,d.a.defaultProps),{ref:"input","aria-controls":r.id,inputProps:b({},e.inputProps,{className:c()("b-typeahead",e.inputProps.className),onChange:this.handleChange})})),this.renderMatches())}}]),t}(a.PureComponent);I.mode={STARTS_WITH:x()(),FUZZY:x()()},I.propTypes=b({},d.a.propTypes,{algorithm:a.PropTypes.oneOfType([a.PropTypes.oneOf([I.mode.STARTS_WITH,I.mode.FUZZY]),a.PropTypes.shape({marker:a.PropTypes.oneOfType([a.PropTypes.func,a.PropTypes.oneOf([I.mode.STARTS_WITH,I.mode.FUZZY])]),matcher:a.PropTypes.oneOfType([a.PropTypes.func,a.PropTypes.oneOf([I.mode.STARTS_WITH,I.mode.FUZZY])])})]),clearOnSelection:a.PropTypes.bool,entities:a.PropTypes.arrayOf(a.PropTypes.shape({text:a.PropTypes.string.isRequired})),hint:a.PropTypes.bool,hintProps:a.PropTypes.shape({"*":a.PropTypes.any}),matchWrapperProps:a.PropTypes.shape({"*":a.PropTypes.any}),offscreenClass:a.PropTypes.string,onComplete:a.PropTypes.func,onEntityHighlighted:a.PropTypes.func,onEntitySelected:a.PropTypes.func}),I.defaultProps=b({},d.a.defaultProps,{algorithm:I.mode.FUZZY,clearOnSelection:!1,entities:[],hint:null,hintProps:{},matchWrapperProps:{},offscreenClass:"b-offscreen",onComplete:k,onEntityHighlighted:k,onEntitySelected:k}),I.internalKeys=Object.keys(I.defaultProps);var M=function(){var e=this;this.state={entityMatchIndexes:[],id:x()(),isControlled:P(this.props.inputProps.value),input:this.props.inputProps.value||this.props.inputProps.defaultValue||"",selectedEntityIndex:-1},this.mounted=!1,this.updateInputState=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e.setState({input:t})},this.getSelectedEntityText=function(){var t=e.props.entities[e.state.selectedEntityIndex];return t?t.text:""},this.resetMatches=function(){e.mounted&&e.setState({selectedEntityIndex:-1,entityMatchIndexes:[]})},this.getInputNode=function(){return e.refs.input.refs.field},this.select=function(){var t=e.getInputNode();t.selectionStart=0,t.selectionEnd=e.getValue().length},this.focus=function(){return e.getInputNode().focus()},this.getValue=function(){return e.refs.input.getValue()},this.setValue=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";e.refs.input.setValue(t),e.updateInputState(t),e.resetMatches(),e.focus()},this.setValueWithSelectedEntity=function(){e.props.onEntitySelected(e.state.selectedEntityIndex),e.props.clearOnSelection?e.setValue(""):e.setValue(e.getSelectedEntityText()),window.setTimeout(e.resetMatches,0)},this.markMatchSubstring=function(){return e.getMarkingFunction().apply(void 0,arguments)},this.getMatchIndexes=function(){return e.getMatchingFunction().apply(void 0,arguments)},this.handleChange=function(t){e.state.isControlled===!1&&(e.updateInputState(t.target.value),e.computeMatches()),E(e.props.inputProps.onChange)&&e.props.inputProps.onChange(t)},this.handleKeyDown=function(t){switch(t.key){case"ArrowLeft":t.target.selectionStart>1&&t.stopPropagation();break;case"Tab":case"ArrowRight":e.state.selectedEntityIndex!==-1&&e.cursorAtEndOfInput()&&e.getInputNode()===t.target&&!t.shiftKey&&(t.nativeEvent.preventDefault(),e.setValueWithSelectedEntity());break;case"ArrowUp":t.nativeEvent.preventDefault(),e.selectMatch(-1),e.focus();break;case"ArrowDown":t.nativeEvent.preventDefault(),e.selectMatch(1),e.focus();break;case"Escape":e.state.selectedEntityIndex!==-1&&e.getInputNode()===t.target&&e.resetMatches();break;case"Enter":e.state.selectedEntityIndex!==-1&&e.getInputNode()===t.target?(t.nativeEvent.preventDefault(),e.setValueWithSelectedEntity()):e.props.onComplete(e.state.input,t)}E(e.props.onKeyDown)&&e.props.onKeyDown(t)}};t.default=I}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,