module.exports=function(e){function t(r){if(n[r])return n[r].exports;var s=n[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,t),s.l=!0,s.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=7)}([function(e,t){e.exports=require("boundless-input")},function(e,t){e.exports=require("boundless-utils-object-intersection")},function(e,t){e.exports=require("boundless-utils-omit-keys")},function(e,t){e.exports=require("boundless-utils-uuid")},function(e,t){e.exports=require("classnames")},function(e,t){e.exports=require("escape-string-regexp")},function(e,t){e.exports=require("react")},function(e,t,n){"use strict";function r(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var o=n(6),p=n.n(o),c=n(4),u=n.n(c),l=n(5),h=n.n(l),d=n(0),f=n.n(d),y=n(1),m=n.n(y),g=n(2),v=n.n(g),x=n(3),b=n.n(x),T=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},E=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),P=function(e){return"function"==typeof e},k=function(e){return"string"==typeof e},I=function(){},M=function(e){function t(){var e,n,r,a;s(this,t);for(var o=arguments.length,p=Array(o),c=0;c<o;c++)p[c]=arguments[c];return n=r=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(p))),S.call(r),a=n,i(r,a)}return a(t,e),E(t,[{key:"componentWillMount",value:function(){(this.props.inputProps.value||this.props.inputProps.defaultValue)&&this.computeMatches()}},{key:"componentDidMount",value:function(){this.mounted=!0,this.state.selectedEntityIndex>=0&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillReceiveProps",value:function(e){e.entities!==this.props.entities&&this.computeMatches(e.entities),e.inputProps.value!==this.props.inputProps.value&&(this.updateInputState(e.inputProps.value),this.computeMatches())}},{key:"componentDidUpdate",value:function(e,t){this.state.entityMatchIndexes.length&&!t.entityMatchIndexes.length&&(this.refs.matches.scrollTop=0),this.state.selectedEntityIndex>=0&&this.props.entities[this.state.selectedEntityIndex]!==e.entities[t.selectedEntityIndex]&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"handleMatchClick",value:function(e){this.setState({selectedEntityIndex:e},this.setValueWithSelectedEntity)}},{key:"selectMatch",value:function(e){var t=this.state.entityMatchIndexes,n=t.length,r=t.indexOf(this.state.selectedEntityIndex)+e;if(n){r<0?r=n-1:r>=n&&(r=0);var s=t[r],i=this.refs.matches,a=i.scrollTop+i.clientHeight,o=this.refs["match_$"+s],p=o.offsetTop,c=p+o.clientHeight;c>=a?i.scrollTop+=c-a:p<=i.scrollTop&&(i.scrollTop=p),this.setState({selectedEntityIndex:s})}}},{key:"cursorAtEndOfInput",value:function(){var e=this.getInputNode();return e.selectionStart===e.selectionEnd&&e.selectionEnd===this.getValue().length}},{key:"markFuzzyMatchSubstring",value:function(e,t){for(var n=t.text,r=n.split(new RegExp("("+h()(e)+")","ig")),s=e.toLowerCase(),i=r.length,a=-1;++a<i;)r[a].toLowerCase()===s&&(r[a]=p.a.createElement("mark",{key:a,className:"b-typeahead-match-highlight"},r[a]));return r}},{key:"markStartsWithMatchSubstring",value:function(e,t){var n=t.text,r=e.toLowerCase(),s=n.toLowerCase().indexOf(r),i=s+r.length;return[p.a.createElement("span",{key:"0"},n.slice(0,s)),p.a.createElement("mark",{key:"1",className:"b-typeahead-match-highlight"},n.slice(s,i)),p.a.createElement("span",{key:"2"},n.slice(i))]}},{key:"getMarkingFunction",value:function(){return k(this.props.algorithm)?this.props.algorithm===t.mode.STARTS_WITH?this.markStartsWithMatchSubstring:this.markFuzzyMatchSubstring:P(this.props.algorithm.marker)?this.props.algorithm.marker:(void 0===this.warnedMarker&&(this.warnedMarker=!0,console.warn("Typeahead: no `props.algorithm.marker` was provided; falling back to the default marking algorithm (FUZZY).")),this.markFuzzyMatchSubstring)}},{key:"getFuzzyMatchIndexes",value:function(e,t){var n=e.toLowerCase();return t.reduce(function(e,t,r){return t.text.toLowerCase().indexOf(n)!==-1?e.push(r)&&e:e},[])}},{key:"getStartsWithMatchIndexes",value:function(e,t){var n=e.toLowerCase();return t.reduce(function(e,t,r){return 0===t.text.toLowerCase().indexOf(n)&&e.push(r),e},[])}},{key:"getMatchingFunction",value:function(){return k(this.props.algorithm)?this.props.algorithm===t.mode.STARTS_WITH?this.getStartsWithMatchIndexes:this.getFuzzyMatchIndexes:P(this.props.algorithm.matcher)?this.props.algorithm.matcher:(void 0===this.warnedMatcher&&(this.warnedMatcher=!0,console.warn("Typeahead: no `props.algorithm.matcher` was provided; falling back to the default matching algorithm (FUZZY).")),this.getFuzzyMatchIndexes)}},{key:"computeMatches",value:function(e){var t=this;this.setState(function(n,r){var s=e||r.entities,i=n.input,a=""===i?[]:t.getMatchIndexes(i,s);return{selectedEntityIndex:a.length?a[0]:-1,entityMatchIndexes:a}})}},{key:"renderNotification",value:function(){return p.a.createElement("div",{ref:"aria",id:this.state.id,className:this.props.offscreenClass,"aria-live":"polite",role:"status"},this.getSelectedEntityText())}},{key:"renderHint",value:function(){if(this.props.hint){var e=this.state.input,t=this.getSelectedEntityText(),n="";return t&&0===t.toLowerCase().indexOf(e.toLowerCase())&&(n=t.replace(new RegExp(e,"i"),e)),p.a.createElement("div",T({},this.props.hintProps,{ref:"hint",className:u()("b-input","b-input-placeholder","b-typeahead-hint",this.props.hintProps.className),tabIndex:"-1"}),n)}}},{key:"renderMatches",value:function(){var e=this;if(this.state.entityMatchIndexes.length){var t=this.props.matchWrapperProps;return p.a.createElement("div",T({},t,{ref:"matches",className:u()("b-typeahead-match-wrapper",t.className),role:"listbox"}),this.state.entityMatchIndexes.map(function(t){var n=e.props.entities[t],s=n.className,i=n.text,a=r(n,["className","text"]);return p.a.createElement("div",T({},a,{ref:"match_$"+t,className:u()("b-typeahead-match",s,{"b-typeahead-match-selected":e.state.selectedEntityIndex===t}),key:i,onClick:e.handleMatchClick.bind(e,t),role:"option"}),e.markMatchSubstring(e.state.input,n))}))}}},{key:"render",value:function(){var e=this.props,n=this.state;return p.a.createElement("div",T({},v()(e,t.internalKeys),{ref:"wrapper",className:u()("b-typeahead-wrapper",e.className),onKeyDown:this.handleKeyDown}),this.renderNotification(),this.renderHint(),p.a.createElement(f.a,T({},m()(e,f.a.defaultProps),{ref:"input","aria-controls":n.id,inputProps:T({},e.inputProps,{className:u()("b-typeahead",e.inputProps.className),onChange:this.handleChange})})),this.renderMatches())}}]),t}(p.a.PureComponent);M.mode={STARTS_WITH:b()(),FUZZY:b()()},M.propTypes=T({},f.a.propTypes,{algorithm:o.PropTypes.oneOfType([o.PropTypes.oneOf([M.mode.STARTS_WITH,M.mode.FUZZY]),o.PropTypes.shape({marker:o.PropTypes.oneOfType([o.PropTypes.func,o.PropTypes.oneOf([M.mode.STARTS_WITH,M.mode.FUZZY])]),matcher:o.PropTypes.oneOfType([o.PropTypes.func,o.PropTypes.oneOf([M.mode.STARTS_WITH,M.mode.FUZZY])])})]),clearOnSelection:o.PropTypes.bool,entities:o.PropTypes.arrayOf(o.PropTypes.shape({text:o.PropTypes.string.isRequired})),hint:o.PropTypes.bool,hintProps:o.PropTypes.shape({"*":o.PropTypes.any}),matchWrapperProps:o.PropTypes.shape({"*":o.PropTypes.any}),offscreenClass:o.PropTypes.string,onComplete:o.PropTypes.func,onEntityHighlighted:o.PropTypes.func,onEntitySelected:o.PropTypes.func}),M.defaultProps=T({},f.a.defaultProps,{algorithm:M.mode.FUZZY,clearOnSelection:!1,entities:[],hint:null,hintProps:{},matchWrapperProps:{},offscreenClass:"b-offscreen",onComplete:I,onEntityHighlighted:I,onEntitySelected:I}),M.internalKeys=Object.keys(M.defaultProps);var S=function(){var e=this;this.state={entityMatchIndexes:[],id:b()(),isControlled:k(this.props.inputProps.value),input:this.props.inputProps.value||this.props.inputProps.defaultValue||"",selectedEntityIndex:-1},this.mounted=!1,this.updateInputState=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e.setState({input:t})},this.getSelectedEntityText=function(){var t=e.props.entities[e.state.selectedEntityIndex];return t?t.text:""},this.resetMatches=function(){e.mounted&&e.setState({selectedEntityIndex:-1,entityMatchIndexes:[]})},this.getInputNode=function(){return e.refs.input.refs.field},this.select=function(){var t=e.getInputNode();t.selectionStart=0,t.selectionEnd=e.getValue().length},this.focus=function(){return e.getInputNode().focus()},this.getValue=function(){return e.refs.input.getValue()},this.setValue=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";e.refs.input.setValue(t),e.updateInputState(t),e.resetMatches(),e.focus()},this.setValueWithSelectedEntity=function(){e.props.onEntitySelected(e.state.selectedEntityIndex),e.props.clearOnSelection?e.setValue(""):e.setValue(e.getSelectedEntityText()),window.setTimeout(e.resetMatches,0)},this.markMatchSubstring=function(){return e.getMarkingFunction().apply(void 0,arguments)},this.getMatchIndexes=function(){return e.getMatchingFunction().apply(void 0,arguments)},this.handleChange=function(t){e.state.isControlled===!1&&(e.updateInputState(t.target.value),e.computeMatches()),P(e.props.inputProps.onChange)&&e.props.inputProps.onChange(t)},this.handleKeyDown=function(t){switch(t.key){case"ArrowLeft":t.target.selectionStart>1&&t.stopPropagation();break;case"Tab":case"ArrowRight":e.state.selectedEntityIndex!==-1&&e.cursorAtEndOfInput()&&e.getInputNode()===t.target&&!t.shiftKey&&(t.nativeEvent.preventDefault(),e.setValueWithSelectedEntity());break;case"ArrowUp":t.nativeEvent.preventDefault(),e.selectMatch(-1),e.focus();break;case"ArrowDown":t.nativeEvent.preventDefault(),e.selectMatch(1),e.focus();break;case"Escape":e.state.selectedEntityIndex!==-1&&e.getInputNode()===t.target&&e.resetMatches();break;case"Enter":e.state.selectedEntityIndex!==-1&&e.getInputNode()===t.target?(t.nativeEvent.preventDefault(),e.setValueWithSelectedEntity()):e.props.onComplete(e.state.input,t)}P(e.props.onKeyDown)&&e.props.onKeyDown(t)}};t.default=M}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,