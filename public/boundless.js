!function(root,factory){"object"==typeof exports&&"object"==typeof module?module.exports=factory(require("react"),require("react-dom")):"function"==typeof define&&define.amd?define(["react","react-dom"],factory):"object"==typeof exports?exports.Boundless=factory(require(void 0),require(void 0)):root.Boundless=factory(root.React,root.ReactDOM)}(this,function(__WEBPACK_EXTERNAL_MODULE_0__,__WEBPACK_EXTERNAL_MODULE_1__){return function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.l=!0,module.exports}var installedModules={};return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.i=function(value){return value},__webpack_require__.d=function(exports,name,getter){__webpack_require__.o(exports,name)||Object.defineProperty(exports,name,{configurable:!1,enumerable:!0,get:getter})},__webpack_require__.n=function(module){var getter=module&&module.__esModule?function(){return module.default}:function(){return module};return __webpack_require__.d(getter,"a",getter),getter},__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s="./exports.js")}({"./exports.js":function(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:!0});var __WEBPACK_IMPORTED_MODULE_0__packages_boundless_arrow_key_navigation__=__webpack_require__("./packages/boundless-arrow-key-navigation/index.js");__webpack_require__.d(__webpack_exports__,"ArrowKeyNavigation",function(){return __WEBPACK_IMPORTED_MODULE_0__packages_boundless_arrow_key_navigation__.a});var __WEBPACK_IMPORTED_MODULE_1__packages_boundless_async__=__webpack_require__("./packages/boundless-async/index.js");__webpack_require__.d(__webpack_exports__,"Async",function(){return __WEBPACK_IMPORTED_MODULE_1__packages_boundless_async__.a});var __WEBPACK_IMPORTED_MODULE_2__packages_boundless_button__=__webpack_require__("./packages/boundless-button/index.js");__webpack_require__.d(__webpack_exports__,"Button",function(){return __WEBPACK_IMPORTED_MODULE_2__packages_boundless_button__.a});var __WEBPACK_IMPORTED_MODULE_3__packages_boundless_checkbox__=__webpack_require__("./packages/boundless-checkbox/index.js");__webpack_require__.d(__webpack_exports__,"Checkbox",function(){return __WEBPACK_IMPORTED_MODULE_3__packages_boundless_checkbox__.a});var __WEBPACK_IMPORTED_MODULE_4__packages_boundless_checkbox_group__=__webpack_require__("./packages/boundless-checkbox-group/index.js");__webpack_require__.d(__webpack_exports__,"CheckboxGroup",function(){return __WEBPACK_IMPORTED_MODULE_4__packages_boundless_checkbox_group__.a});var __WEBPACK_IMPORTED_MODULE_5__packages_boundless_dialog__=__webpack_require__("./packages/boundless-dialog/index.js");__webpack_require__.d(__webpack_exports__,"Dialog",function(){return __WEBPACK_IMPORTED_MODULE_5__packages_boundless_dialog__.a});var __WEBPACK_IMPORTED_MODULE_6__packages_boundless_fitted_text__=__webpack_require__("./packages/boundless-fitted-text/index.js");__webpack_require__.d(__webpack_exports__,"FittedText",function(){return __WEBPACK_IMPORTED_MODULE_6__packages_boundless_fitted_text__.a});var __WEBPACK_IMPORTED_MODULE_7__packages_boundless_image__=__webpack_require__("./packages/boundless-image/index.js");__webpack_require__.d(__webpack_exports__,"Image",function(){return __WEBPACK_IMPORTED_MODULE_7__packages_boundless_image__.a});var __WEBPACK_IMPORTED_MODULE_8__packages_boundless_input__=__webpack_require__("./packages/boundless-input/index.js");__webpack_require__.d(__webpack_exports__,"Input",function(){return __WEBPACK_IMPORTED_MODULE_8__packages_boundless_input__.a});var __WEBPACK_IMPORTED_MODULE_9__packages_boundless_modal__=__webpack_require__("./packages/boundless-modal/index.js");__webpack_require__.d(__webpack_exports__,"Modal",function(){return __WEBPACK_IMPORTED_MODULE_9__packages_boundless_modal__.a});var __WEBPACK_IMPORTED_MODULE_10__packages_boundless_pagination__=__webpack_require__("./packages/boundless-pagination/index.js");__webpack_require__.d(__webpack_exports__,"Pagination",function(){return __WEBPACK_IMPORTED_MODULE_10__packages_boundless_pagination__.a});var __WEBPACK_IMPORTED_MODULE_11__packages_boundless_popover__=__webpack_require__("./packages/boundless-popover/index.js");__webpack_require__.d(__webpack_exports__,"Popover",function(){return __WEBPACK_IMPORTED_MODULE_11__packages_boundless_popover__.a});var __WEBPACK_IMPORTED_MODULE_12__packages_boundless_portal__=__webpack_require__("./packages/boundless-portal/index.js");__webpack_require__.d(__webpack_exports__,"Portal",function(){return __WEBPACK_IMPORTED_MODULE_12__packages_boundless_portal__.a});var __WEBPACK_IMPORTED_MODULE_13__packages_boundless_progressive_disclosure__=__webpack_require__("./packages/boundless-progressive-disclosure/index.js");__webpack_require__.d(__webpack_exports__,"ProgressiveDisclosure",function(){return __WEBPACK_IMPORTED_MODULE_13__packages_boundless_progressive_disclosure__.a});var __WEBPACK_IMPORTED_MODULE_14__packages_boundless_progress__=__webpack_require__("./packages/boundless-progress/index.js");__webpack_require__.d(__webpack_exports__,"Progress",function(){return __WEBPACK_IMPORTED_MODULE_14__packages_boundless_progress__.a});var __WEBPACK_IMPORTED_MODULE_15__packages_boundless_radio__=__webpack_require__("./packages/boundless-radio/index.js");__webpack_require__.d(__webpack_exports__,"Radio",function(){return __WEBPACK_IMPORTED_MODULE_15__packages_boundless_radio__.a});var __WEBPACK_IMPORTED_MODULE_16__packages_boundless_segmented_control__=__webpack_require__("./packages/boundless-segmented-control/index.js");__webpack_require__.d(__webpack_exports__,"SegmentedControl",function(){return __WEBPACK_IMPORTED_MODULE_16__packages_boundless_segmented_control__.a});var __WEBPACK_IMPORTED_MODULE_17__packages_boundless_tokenized_input__=__webpack_require__("./packages/boundless-tokenized-input/index.js");__webpack_require__.d(__webpack_exports__,"TokenizedInput",function(){return __WEBPACK_IMPORTED_MODULE_17__packages_boundless_tokenized_input__.a});var __WEBPACK_IMPORTED_MODULE_18__packages_boundless_typeahead__=__webpack_require__("./packages/boundless-typeahead/index.js");__webpack_require__.d(__webpack_exports__,"Typeahead",function(){return __WEBPACK_IMPORTED_MODULE_18__packages_boundless_typeahead__.a})},"./node_modules/classnames/index.js":function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__,_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};!function(){"use strict";function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=void 0===arg?"undefined":_typeof(arg);if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg))classes.push(classNames.apply(null,arg));else if("object"===argType)for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}return classes.join(" ")}var hasOwn={}.hasOwnProperty;void 0!==module&&module.exports?module.exports=classNames:"object"===_typeof(__webpack_require__("./node_modules/webpack/buildin/amd-options.js"))&&__webpack_require__("./node_modules/webpack/buildin/amd-options.js")?(__WEBPACK_AMD_DEFINE_ARRAY__=[],__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__),void 0!==__WEBPACK_AMD_DEFINE_RESULT__&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)):window.classNames=classNames}()},"./node_modules/webpack/buildin/amd-options.js":function(module,exports){(function(__webpack_amd_options__){module.exports=__webpack_amd_options__}).call(exports,{})},"./node_modules/webpack/buildin/global.js":function(module,exports){var g,_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};g=function(){return this}();try{g=g||Function("return this")()||(0,eval)("this")}catch(e){"object"===("undefined"==typeof window?"undefined":_typeof(window))&&(g=window)}module.exports=g},"./packages/boundless-arrow-key-navigation/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_react_dom__=__webpack_require__(1),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_dom__),__webpack_require__("./packages/boundless-utils-omit-keys/index.js")),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),DATA_ATTRIBUTE_INDEX="data-focus-index",DATA_ATTRIBUTE_SKIP="data-focus-skip",ArrowKeyNavigation=function(_React$PureComponent){function ArrowKeyNavigation(){var _ref,_temp,_this,_ret;_classCallCheck(this,ArrowKeyNavigation);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=ArrowKeyNavigation.__proto__||Object.getPrototypeOf(ArrowKeyNavigation)).call.apply(_ref,[this].concat(args))),_this.state={activeChildIndex:_this.props.defaultActiveChildIndex,children:[]},_this.handleKeyDown=function(event){switch(event.key){case"ArrowUp":_this.props.mode!==ArrowKeyNavigation.mode.VERTICAL&&_this.props.mode!==ArrowKeyNavigation.mode.BOTH||(event.preventDefault(),_this.moveFocus(-1));break;case"ArrowLeft":_this.props.mode!==ArrowKeyNavigation.mode.HORIZONTAL&&_this.props.mode!==ArrowKeyNavigation.mode.BOTH||(event.preventDefault(),_this.moveFocus(-1));break;case"ArrowDown":_this.props.mode!==ArrowKeyNavigation.mode.VERTICAL&&_this.props.mode!==ArrowKeyNavigation.mode.BOTH||(event.preventDefault(),_this.moveFocus(1));break;case"ArrowRight":_this.props.mode!==ArrowKeyNavigation.mode.HORIZONTAL&&_this.props.mode!==ArrowKeyNavigation.mode.BOTH||(event.preventDefault(),_this.moveFocus(1))}_this.props.onKeyDown&&_this.props.onKeyDown(event)},_this.handleFocus=function(event){if(event.target.hasAttribute(DATA_ATTRIBUTE_INDEX)){var index=parseInt(event.target.getAttribute(DATA_ATTRIBUTE_INDEX),10),child=__WEBPACK_IMPORTED_MODULE_0_react__.Children.toArray(_this.state.children)[index];_this.setState({activeChildIndex:index}),child.props.onFocus&&child.props.onFocus(event)}},_this.persistWrapperElementReference=function(unknownType){_this.$wrapper=unknownType instanceof HTMLElement?unknownType:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react_dom__.findDOMNode)(unknownType)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(ArrowKeyNavigation,_React$PureComponent),_createClass(ArrowKeyNavigation,[{key:"getFilteredChildren",value:function(){var props=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props;return __WEBPACK_IMPORTED_MODULE_0_react__.Children.toArray(props.children).filter(Boolean)}},{key:"setActiveChildIndex",value:function(){if(0!==this.state.activeChildIndex){var numChildren=__WEBPACK_IMPORTED_MODULE_0_react__.Children.count(this.state.children);0===numChildren?this.setState({activeChildIndex:0}):this.state.activeChildIndex>=numChildren&&this.setState({activeChildIndex:numChildren-1})}}},{key:"componentWillMount",value:function(){this.setState({children:this.getFilteredChildren()})}},{key:"componentWillReceiveProps",value:function(nextProps){if(nextProps.children!==this.props.children)return this.setState({children:this.getFilteredChildren(nextProps)},this.setActiveChildIndex);this.setActiveChildIndex()}},{key:"componentDidUpdate",value:function(prevProps,prevState){this.state.activeChildIndex!==prevState.activeChildIndex&&this.setFocus(this.state.activeChildIndex)}},{key:"setFocus",value:function(index){var childNode=this.$wrapper.children[index];childNode&&childNode.hasAttribute(DATA_ATTRIBUTE_SKIP)?this.moveFocus(childNode.compareDocumentPosition(document.activeElement)&Node.DOCUMENT_POSITION_FOLLOWING?-1:1):childNode&&document.activeElement!==childNode&&childNode.focus()}},{key:"moveFocus",value:function(delta){var numChildren=this.state.children?__WEBPACK_IMPORTED_MODULE_0_react__.Children.count(this.state.children):0,nextIndex=this.state.activeChildIndex+delta;nextIndex>=numChildren?nextIndex=0:nextIndex<0&&(nextIndex=numChildren-1),this.setState({activeChildIndex:nextIndex})}},{key:"renderChildren",value:function(){var _this2=this;return __WEBPACK_IMPORTED_MODULE_0_react__.Children.map(this.state.children,function(child,index){var _React$cloneElement;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.cloneElement(child,(_React$cloneElement={},_defineProperty(_React$cloneElement,DATA_ATTRIBUTE_INDEX,index),_defineProperty(_React$cloneElement,DATA_ATTRIBUTE_SKIP,parseInt(child.props.tabIndex,10)===-1||void 0),_defineProperty(_React$cloneElement,"key",child.key||index),_defineProperty(_React$cloneElement,"tabIndex",_this2.state.activeChildIndex===index?0:-1),_React$cloneElement))})}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props,ArrowKeyNavigation.internalKeys),{ref:this.persistWrapperElementReference,onFocus:this.handleFocus,onKeyDown:this.handleKeyDown}),this.renderChildren())}}]),ArrowKeyNavigation}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);ArrowKeyNavigation.mode={HORIZONTAL:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)(),VERTICAL:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)(),BOTH:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)()},ArrowKeyNavigation.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),defaultActiveChildIndex:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.number,mode:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOf([ArrowKeyNavigation.mode.BOTH,ArrowKeyNavigation.mode.HORIZONTAL,ArrowKeyNavigation.mode.VERTICAL])},ArrowKeyNavigation.defaultProps={component:"div",defaultActiveChildIndex:0,mode:ArrowKeyNavigation.mode.BOTH,onKeyDown:function(){}},ArrowKeyNavigation.internalKeys=Object.keys(ArrowKeyNavigation.defaultProps),__webpack_exports__.a=ArrowKeyNavigation},"./packages/boundless-async/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),get=function(base,path,fallback){return path.split(".").reduce(function(current,fragment){return current[fragment]||fallback},base)},Async=function(_React$PureComponent){function Async(){var _ref,_temp,_this,_ret;_classCallCheck(this,Async);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Async.__proto__||Object.getPrototypeOf(Async)).call.apply(_ref,[this].concat(args))),_this.mounted=!1,_this.promise=null,_this.state={},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Async,_React$PureComponent),_createClass(Async,[{key:"handlePromiseFulfillment",value:function(context,payload){this.mounted&&this.setState(function(state){return this.promise===context?(this.promise=null,{component:payload}):state},this.fireRenderCallback)}},{key:"handleChildren",value:function(children){var content=children;if(__WEBPACK_IMPORTED_MODULE_0_react___default.a.isValidElement(content))return this.setState({component:content},this.fireRenderCallback);if("function"==typeof content)return this.handleChildren(content(this.props));var boundHandler=this.handlePromiseFulfillment.bind(this,content);this.promise=content,this.setState({component:null},function(){return content.then(boundHandler,boundHandler)})}},{key:"fireRenderCallback",value:function(){this.state.component&&this.props.childrenDidRender()}},{key:"componentWillMount",value:function(){this.handleChildren(this.props.children)}},{key:"componentDidMount",value:function(){this.mounted=!0}},{key:"componentWillReceiveProps",value:function(nextProps){this.handleChildren(nextProps.children)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"render",value:function(){var props=this.props,state=this.state;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.cloneElement(state.component||props.pendingContent,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(props,Async.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-async",props.className,null===state.component&&get(props,"pendingContent.props.className"),state.component&&get(state,"component.props.className",""),{"b-async-pending":null===state.component})}))}}]),Async}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Async.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,children:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.instanceOf(Promise)]).isRequired,childrenDidRender:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,pendingContent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node},Async.defaultProps={children:__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",null),childrenDidRender:function(){},pendingContent:__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",null)},Async.internalKeys=Object.keys(Async.defaultProps),__webpack_exports__.a=Async},"./packages/boundless-button/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),Button=function(_React$PureComponent){function Button(){var _ref,_temp,_this,_ret;_classCallCheck(this,Button);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Button.__proto__||Object.getPrototypeOf(Button)).call.apply(_ref,[this].concat(args))),_this.handleClick=function(event){_this.props.disabled||(_this.props.onClick(event),_this.fireStatefulCallback(event))},_this.handleKeyDown=function(event){if(!_this.props.disabled)switch(_this.props.onKeyDown(event),event.key){case"Enter":case"Space":event.preventDefault(),_this.fireStatefulCallback(event)}},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Button,_React$PureComponent),_createClass(Button,[{key:"fireStatefulCallback",value:function(event){this.props[this.props.pressed?"onUnpressed":"onPressed"](event)}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props,Button.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-button",this.props.className,{"b-button-pressable":void 0!==this.props.pressed,"b-button-pressed":this.props.pressed}),"aria-pressed":this.props.pressed,role:"button",onKeyDown:this.handleKeyDown,onClick:this.handleClick}),this.props.children)}}]),Button}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Button.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),onPressed:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onUnpressed:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,pressed:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool},Button.defaultProps={component:"button",onClick:function(){},onKeyDown:function(){},onPressed:function(){},onUnpressed:function(){},pressed:void 0},Button.internalKeys=Object.keys(Button.defaultProps),__webpack_exports__.a=Button},"./packages/boundless-checkbox-group/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_checkbox__=__webpack_require__("./packages/boundless-checkbox/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),noop=function(){},CheckboxGroup=function(_React$PureComponent){function CheckboxGroup(){var _ref,_temp,_this,_ret;_classCallCheck(this,CheckboxGroup);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=CheckboxGroup.__proto__||Object.getPrototypeOf(CheckboxGroup)).call.apply(_ref,[this].concat(args))),_this.selectAllUUID=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__.a)(),_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(CheckboxGroup,_React$PureComponent),_createClass(CheckboxGroup,[{key:"allItemsChecked",value:function(){return this.props.items.every(function(item){return item.inputProps.checked===!0})}},{key:"anyItemsChecked",value:function(){return this.props.items.some(function(item){return item.inputProps.checked===!0})}},{key:"renderSelectAllCheckbox",value:function(){var allChecked=this.allItemsChecked(),inputProps=this.props.selectAllProps.inputProps;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2_boundless_checkbox__.a,_extends({},this.props.selectAllProps,{key:this.selectAllUUID,className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-checkbox-group-all",this.props.selectAllProps.className),inputProps:_extends({},inputProps,{checked:allChecked,indeterminate:!allChecked&&this.anyItemsChecked(),name:inputProps&&inputProps.name?inputProps.name:null}),label:this.props.selectAllProps.label||"Select All",onChecked:this.props.onAllChecked,onUnchecked:this.props.onAllUnchecked}))}},{key:"renderCheckboxes",value:function(){var _this2=this;return this.props.items.map(function(item){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2_boundless_checkbox__.a,_extends({},item,{key:item.inputProps.name,onChecked:_this2.props.onChildChecked,onUnchecked:_this2.props.onChildUnchecked}))})}},{key:"renderChildren",value:function(){var children=[this.renderCheckboxes()];switch(this.props.selectAll){case CheckboxGroup.selectAll.BEFORE:children.unshift(this.renderSelectAllCheckbox());break;case CheckboxGroup.selectAll.AFTER:children.push(this.renderSelectAllCheckbox())}return children}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(this.props,CheckboxGroup.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-checkbox-group",this.props.className)}),this.renderChildren())}}]),CheckboxGroup}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);CheckboxGroup.selectAll={BEFORE:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__.a)(),AFTER:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__.a)(),NONE:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__.a)()},CheckboxGroup.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,items:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.arrayOf(__WEBPACK_IMPORTED_MODULE_2_boundless_checkbox__.a.propTypes.inputProps).isRequired,onAllChecked:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onAllUnchecked:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onChildChecked:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onChildUnchecked:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,selectAll:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOf([CheckboxGroup.selectAll.BEFORE,CheckboxGroup.selectAll.AFTER,CheckboxGroup.selectAll.NONE]),selectAllProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,label:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,inputProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.object})},CheckboxGroup.defaultProps={component:"div",items:[],onAllChecked:noop,onAllUnchecked:noop,onChildChecked:noop,onChildUnchecked:noop,selectAll:CheckboxGroup.selectAll.BEFORE,selectAllProps:{}},CheckboxGroup.internalKeys=Object.keys(CheckboxGroup.defaultProps),__webpack_exports__.a=CheckboxGroup},"./packages/boundless-checkbox/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},noop=function(){},Checkbox=function(_React$PureComponent){function Checkbox(){var _ref,_temp,_this,_ret;_classCallCheck(this,Checkbox);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Checkbox.__proto__||Object.getPrototypeOf(Checkbox)).call.apply(_ref,[this].concat(args))),_this.id=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)(),_this.handleChange=function(event){_this.props.inputProps.disabled||(_this.props[_this.props.inputProps.checked?"onUnchecked":"onChecked"](_this.props.inputProps.name),isFunction(_this.props.inputProps.onChange)&&_this.props.inputProps.onChange(event))},_this.handleClick=function(event){_this.props.inputProps.disabled||(_this.refs.input.focus(),isFunction(_this.props.inputProps.onClick)&&_this.props.inputProps.onClick(event))},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Checkbox,_React$PureComponent),_createClass(Checkbox,[{key:"componentDidMount",value:function(){this.props.inputProps.indeterminate&&this.setIndeterminate()}},{key:"componentDidUpdate",value:function(prevProps){prevProps.inputProps.indeterminate!==this.props.inputProps.indeterminate&&this.setIndeterminate()}},{key:"setIndeterminate",value:function(){this.refs.input.indeterminate=!!this.props.inputProps.indeterminate}},{key:"getAriaState",value:function(){return this.props.inputProps.indeterminate?"mixed":String(this.props.inputProps.checked)}},{key:"renderInput",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("input",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props.inputProps,"indeterminate"),{ref:"input",type:"checkbox",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-checkbox",this.props.inputProps.className,{"b-checkbox-mixed":this.props.inputProps.indeterminate,"b-checkbox-checked":this.props.inputProps.checked,"b-checkbox-unchecked":!this.props.inputProps.indeterminate&&!this.props.inputProps.checked}),id:this.props.inputProps.id||this.id,"aria-checked":this.getAriaState(),onChange:this.handleChange,onClick:this.handleClick}))}},{key:"renderLabel",value:function(){if(this.props.label)return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("label",_extends({},this.props.labelProps,{ref:"label",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-checkbox-label",this.props.labelProps.className),htmlFor:this.props.inputProps.id||this.id}),this.props.label)}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props,Checkbox.internalKeys),{ref:"wrapper",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-checkbox-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]),Checkbox}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Checkbox.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,inputProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,checked:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,className:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,disabled:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,id:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,indeterminate:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,onChange:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onClick:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,name:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,value:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string}),label:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,labelProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),onChecked:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onUnchecked:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func},Checkbox.defaultProps={component:"div",inputProps:{checked:!1,indeterminate:!1},label:null,labelProps:{},onChecked:noop,onUnchecked:noop},Checkbox.internalKeys=Object.keys(Checkbox.defaultProps),__webpack_exports__.a=Checkbox},"./packages/boundless-dialog/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_portal__=__webpack_require__("./packages/boundless-portal/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},noop=function(){},toArray=Array.prototype.slice,Dialog=function(_React$PureComponent){function Dialog(){var _ref,_temp,_this,_ret;_classCallCheck(this,Dialog);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Dialog.__proto__||Object.getPrototypeOf(Dialog)).call.apply(_ref,[this].concat(args))),_this.mounted=!1,_this.handleFocus=function(nativeEvent){if(_this.props.captureFocus){var previous=nativeEvent.explicitOriginalTarget||nativeEvent.relatedTarget;_this.isPartOfDialog(previous)&&!_this.isPartOfDialog(nativeEvent.target)&&(nativeEvent.preventDefault(),previous.focus())}else if(_this.shouldDialogCloseOnEvent("closeOnOutsideFocus",nativeEvent)&&!_this.isPartOfDialog(nativeEvent.target))return window.setTimeout(_this.props.onClose,0)},_this.handleKeyDown=function(event){"Escape"===event.key&&_this.shouldDialogCloseOnEvent("closeOnEscKey",event)&&window.setTimeout(_this.props.onClose,0),_this.props.onKeyDown&&_this.props.onKeyDown(event)},_this.handleInsideClick=function(event){_this.shouldDialogCloseOnEvent("closeOnInsideClick",event)&&window.setTimeout(_this.props.onClose,0)},_this.handleOutsideClick=function(nativeEvent){_this.shouldDialogCloseOnEvent("closeOnOutsideClick",nativeEvent)&&!_this.isPartOfDialog(nativeEvent.target)&&window.setTimeout(_this.props.onClose,0)},_this.handleOutsideScrollWheel=function(nativeEvent){_this.shouldDialogCloseOnEvent("closeOnOutsideScroll",nativeEvent)&&!_this.isPartOfDialog(nativeEvent.target)&&window.setTimeout(_this.props.onClose,0)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Dialog,_React$PureComponent),_createClass(Dialog,[{key:"isPartOfDialog",value:function(node){if(!node||node===window)return!1;var roots=[this.$wrapper].concat(toArray.call(this.$wrapper.querySelectorAll("["+__WEBPACK_IMPORTED_MODULE_2_boundless_portal__.a.PORTAL_DATA_ATTRIBUTE+"]")).map(function(dom){return document.getElementById(dom.getAttribute(__WEBPACK_IMPORTED_MODULE_2_boundless_portal__.a.PORTAL_DATA_ATTRIBUTE))})),element=node.nodeType!==Node.ELEMENT_NODE?node.parentNode:node;return roots.some(function(dom){return dom.contains(element)})}},{key:"componentDidMount",value:function(){window.addEventListener("click",this.handleOutsideClick,!0),window.addEventListener("contextmenu",this.handleOutsideClick,!0),window.addEventListener("focus",this.handleFocus,!0),window.addEventListener("scroll",this.handleOutsideScrollWheel,!0),window.addEventListener("wheel",this.handleOutsideScrollWheel,!0),this.props.captureFocus&&!this.isPartOfDialog(document.activeElement)&&this.$dialog.focus()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("click",this.handleOutsideClick,!0),window.removeEventListener("contextmenu",this.handleOutsideClick,!0),window.removeEventListener("focus",this.handleFocus,!0),window.removeEventListener("scroll",this.handleOutsideScrollWheel,!0),window.removeEventListener("wheel",this.handleOutsideScrollWheel,!0)}},{key:"shouldDialogCloseOnEvent",value:function(prop,event){return isFunction(this.props[prop])?this.props[prop](event):this.props[prop]}},{key:"renderFocusBoundary",value:function(){if(this.props.captureFocus)return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",{className:"b-offscreen",tabIndex:"0","aria-hidden":"true"}," ")}},{key:"render",value:function(){var _this2=this;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(this.props,Dialog.internalKeys),{ref:function(node){return _this2.$wrapper=node},className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-dialog-wrapper",this.props.className)}),this.renderFocusBoundary(),this.props.before,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.dialogComponent,_extends({},this.dialogProps,{ref:function(node){return _this2.$dialog=node},className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-dialog",this.props.dialogProps.className),onClick:this.handleInsideClick,onKeyDown:this.handleKeyDown,role:this.props.captureFocus?"alertdialog":"dialog",tabIndex:"0"}),this.props.children),this.props.after,this.renderFocusBoundary())}}]),Dialog}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Dialog.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,after:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,before:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,captureFocus:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,closeOnEscKey:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),closeOnInsideClick:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),closeOnOutsideClick:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),closeOnOutsideFocus:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),closeOnOutsideScroll:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,dialogComponent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,dialogProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),onClose:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func},Dialog.defaultProps={after:null,before:null,captureFocus:!0,children:null,closeOnEscKey:!1,closeOnInsideClick:!1,closeOnOutsideClick:!1,closeOnOutsideFocus:!1,closeOnOutsideScroll:!1,component:"div",dialogComponent:"div",dialogProps:{},onClose:noop,onKeyDown:noop},Dialog.internalKeys=Object.keys(Dialog.defaultProps),__webpack_exports__.a=Dialog},"./packages/boundless-fitted-text/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}function toI(stringNumber){return parseInt(stringNumber,10)}function rescale(instance){var node=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react_dom__.findDOMNode)(instance),containerBox=window.getComputedStyle(node.parentNode),fontSize=toI(window.getComputedStyle(node).fontSize);null===instance.baseFontSize&&(instance.baseFontSize=fontSize);var containerHeight=toI(containerBox.height),containerWidth=toI(containerBox.width);"border-box"!==containerBox.boxSizing&&"padding-box"!==containerBox.boxSizing||(containerHeight-=toI(containerBox.paddingTop)+toI(containerBox.paddingBottom),containerWidth-=toI(containerBox.paddingLeft)+toI(containerBox.paddingRight));var optimizeForHeight=Math.floor(fontSize/node.offsetHeight*containerHeight),optimizeForWidth=Math.floor(fontSize/node.offsetWidth*containerWidth);instance.props.upscale?node.style.fontSize=(Math.max(optimizeForHeight,optimizeForWidth)||1)+"px":node.style.fontSize=(Math.min(instance.baseFontSize,optimizeForHeight,optimizeForWidth)||1)+"px"}function handleWindowResize(){instances.forEach(function(instance){return rescale(instance)})}function registerInstance(instance){0===instances.length&&window.addEventListener("resize",handleWindowResize,!0),instances.push(instance)}function unregisterInstance(instance){instances.splice(instances.indexOf(instance),1),0===instances.length&&window.removeEventListener("resize",handleWindowResize,!0)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_react_dom__=__webpack_require__(1),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_dom__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),instances=[],FittedText=function(_React$PureComponent){function FittedText(){var _ref,_temp,_this,_ret;_classCallCheck(this,FittedText);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=FittedText.__proto__||Object.getPrototypeOf(FittedText)).call.apply(_ref,[this].concat(args))),_this.baseFontSize=null,_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(FittedText,_React$PureComponent),_createClass(FittedText,[{key:"componentDidMount",value:function(){rescale(this),registerInstance(this)}},{key:"componentDidUpdate",value:function(){rescale(this)}},{key:"componentWillUnmount",value:function(){unregisterInstance(this)}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(this.props,FittedText.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-text",this.props.className)}),this.props.children)}}]),FittedText}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);FittedText.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,upscale:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool},FittedText.defaultProps={component:"span",upscale:!1},FittedText.internalKeys=Object.keys(FittedText.defaultProps),__webpack_exports__.a=FittedText},"./packages/boundless-image/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),Image=function(_React$PureComponent){function Image(){var _ref,_temp,_this,_ret;_classCallCheck(this,Image);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Image.__proto__||Object.getPrototypeOf(Image)).call.apply(_ref,[this].concat(args))),_this.state={status:Image.status.LOADING},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Image,_React$PureComponent),_createClass(Image,[{key:"componentWillReceiveProps",value:function(nextProps){nextProps.src!==this.props.src&&(this.resetPreloader(),this.setState({status:Image.status.LOADING}))}},{key:"componentDidMount",value:function(){this.preload()}},{key:"componentDidUpdate",value:function(){this.preload()}},{key:"componentWillUnmount",value:function(){this.resetPreloader()}},{key:"resetPreloader",value:function(){this.loader.onload=null,this.loader.onerror=null,this.loader=null}},{key:"preload",value:function(){var _this2=this;this.loader||(this.loader=document.createElement("img"),this.loader.onload=function(){return _this2.setState({status:Image.status.LOADED})},this.loader.onerror=function(){return _this2.setState({status:Image.status.ERROR})},this.loader.src=this.props.src)}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props,Image.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-image",this.props.className,{"b-image-loading":this.state.status===Image.status.LOADING,"b-image-loaded":this.state.status===Image.status.LOADED,"b-image-error":this.state.status===Image.status.ERROR}),title:this.props.alt,role:"img",style:_extends({},this.props.style,{backgroundImage:"url("+this.props.src+")"})})," ")}}]),Image}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Image.status={LOADING:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)(),LOADED:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)(),ERROR:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)()},Image.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,alt:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,src:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string.isRequired},Image.defaultProps={alt:"",component:"div",src:"about:blank"},Image.internalKeys=Object.keys(Image.defaultProps),__webpack_exports__.a=Image},"./packages/boundless-input/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},Input=function(_React$PureComponent){function Input(){var _ref,_temp,_this,_ret;_classCallCheck(this,Input);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Input.__proto__||Object.getPrototypeOf(Input)).call.apply(_ref,[this].concat(args))),_this.state={input:"",isControlled:"string"==typeof _this.props.inputProps.value,isFocused:!1},_this.setInputValue=function(){var value=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return _this.setState({input:value})},_this.getValue=function(){return _this.refs.field.value},_this.handleBlur=function(event){_this.setState({isFocused:!1}),isFunction(_this.props.inputProps.onBlur)===!0&&_this.props.inputProps.onBlur(event)},_this.handleFocus=function(event){_this.setState({isFocused:!0}),isFunction(_this.props.inputProps.onFocus)===!0&&_this.props.inputProps.onFocus(event)},_this.handleChange=function(event){_this.state.isControlled===!1&&_this.setInputValue(event.target.value),isFunction(_this.props.inputProps.onChange)===!0&&_this.props.inputProps.onChange(event)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Input,_React$PureComponent),_createClass(Input,[{key:"componentWillMount",value:function(){if(this.state.isControlled===!0)return this.setInputValue(this.props.inputProps.value);this.setInputValue(this.props.inputProps.defaultValue)}},{key:"componentWillReceiveProps",value:function(nextProps){nextProps.inputProps.value!==this.props.inputProps.value&&this.setInputValue(nextProps.inputProps.value)}},{key:"setValue",value:function(nextValue){this.setInputValue(nextValue),this.refs.field.value=nextValue,this.state.isControlled===!0&&(this.refs.field.dispatchEvent(new Event("input",{bubbles:!0})),this.refs.field.dispatchEvent(new Event("change",{bubbles:!0})))}},{key:"getPlaceholderText",value:function(){var isNonEmpty=""!==this.state.input;return(this.props.hidePlaceholderOnFocus===!0?this.state.isFocused===!1&&isNonEmpty===!1:isNonEmpty===!1)?this.props.inputProps.placeholder:""}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props,Input.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-input-wrapper",this.props.className),title:this.getPlaceholderText()}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("input",_extends({},this.props.inputProps,{ref:"field",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-input",this.props.inputProps.className),placeholder:null,onBlur:this.handleBlur,onFocus:this.handleFocus,onChange:this.handleChange})),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",{className:"b-input-placeholder b-input"},this.getPlaceholderText()))}}]),Input}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Input.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,hidePlaceholderOnFocus:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,inputProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,defaultValue:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,onBlur:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onFocus:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onChange:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,placeholder:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,type:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,value:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string})},Input.defaultProps={component:"div",hidePlaceholderOnFocus:!0,inputProps:{type:"text"}},Input.internalKeys=Object.keys(Input.defaultProps),__webpack_exports__.a=Input},"./packages/boundless-modal/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_dialog__=__webpack_require__("./packages/boundless-dialog/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_portal__=__webpack_require__("./packages/boundless-portal/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_object_intersection__=__webpack_require__("./packages/boundless-utils-object-intersection/index.js"),__WEBPACK_IMPORTED_MODULE_5_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),Modal=function(_React$PureComponent){function Modal(){return _classCallCheck(this,Modal),_possibleConstructorReturn(this,(Modal.__proto__||Object.getPrototypeOf(Modal)).apply(this,arguments))}return _inherits(Modal,_React$PureComponent),_createClass(Modal,[{key:"render",value:function(){var _this2=this,props=this.props;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3_boundless_portal__.a,props.portalProps,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_boundless_utils_omit_keys__.a)(props,Modal.internalKeys),{ref:function(node){return _this2.$modal=node},className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-modal-wrapper",props.className)}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",_extends({},props.maskProps,{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-modal-mask",props.maskProps.className)})),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2_boundless_dialog__.a,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_object_intersection__.a)(props,__WEBPACK_IMPORTED_MODULE_2_boundless_dialog__.a.defaultProps),props.modalProps,{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-modal",props.modalProps.className)}),props.children)))}}]),Modal}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Modal.propTypes=_extends({},__WEBPACK_IMPORTED_MODULE_2_boundless_dialog__.a.propTypes,{maskProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),modalProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),portalProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape(__WEBPACK_IMPORTED_MODULE_3_boundless_portal__.a.propTypes)}),Modal.defaultProps=_extends({},__WEBPACK_IMPORTED_MODULE_2_boundless_dialog__.a.defaultProps,{captureFocus:!0,maskProps:{},modalProps:{},portalProps:{}}),Modal.internalKeys=Object.keys(Modal.defaultProps),__webpack_exports__.a=Modal},"./packages/boundless-pagination/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_lodash_isInteger__=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/isInteger.js"),__WEBPACK_IMPORTED_MODULE_0_lodash_isInteger___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_isInteger__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_1_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__WEBPACK_IMPORTED_MODULE_2_react_dom__=__webpack_require__(1),__WEBPACK_IMPORTED_MODULE_3_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react_dom__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_3_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_classnames__),__WEBPACK_IMPORTED_MODULE_4_boundless_async__=__webpack_require__("./packages/boundless-async/index.js"),__WEBPACK_IMPORTED_MODULE_5_boundless_segmented_control__=__webpack_require__("./packages/boundless-segmented-control/index.js"),__WEBPACK_IMPORTED_MODULE_6_boundless_arrow_key_navigation__=__webpack_require__("./packages/boundless-arrow-key-navigation/index.js"),__WEBPACK_IMPORTED_MODULE_7_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),identity=function(x){return x},isFunction=function(x){return"function"==typeof x},noop=function(){},Pagination=function(_React$PureComponent){function Pagination(){var _ref,_temp,_this,_ret;_classCallCheck(this,Pagination);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Pagination.__proto__||Object.getPrototypeOf(Pagination)).call.apply(_ref,[this].concat(args))),_this.mounted=!1,_this.state={currentPage:_this.props.initialPage,targetIndex:(_this.props.initialPage-1)*_this.props.numItemsPerPage},_this.currentPage=function(){return _this.state.currentPage},_this.getPageForIndex=function(index){var itemsPerPage=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_this.props.numItemsPerPage;return Math.ceil((index+1)/itemsPerPage)},_this.totalPages=function(){return Math.ceil(_this.props.totalItems/_this.props.numItemsPerPage)},_this.firstVisibleItemIndex=function(){return(_this.currentPage()-1)*_this.props.numItemsPerPage},_this.jumpToIndex=function(i){if(i<0||i>=_this.props.totalItems)throw Error("Cannot page to invalid index "+i+".");_this.setState({currentPage:_this.getPageForIndex(i),targetIndex:i})},_this.handlePageSelected=function(option){var nextTargetIndex=void 0;switch(option[Pagination.CONTROL_DATA_ATTRIBUTE]){case void 0:return;case Pagination.control.FIRST:nextTargetIndex=0;break;case Pagination.control.PREVIOUS:nextTargetIndex=_this.firstVisibleItemIndex()-_this.props.numItemsPerPage;break;case Pagination.control.NEXT:nextTargetIndex=_this.firstVisibleItemIndex()+_this.props.numItemsPerPage;break;case Pagination.control.LAST:nextTargetIndex=_this.props.totalItems-1;break;default:nextTargetIndex=parseInt(option[Pagination.CONTROL_DATA_ATTRIBUTE],10)*_this.props.numItemsPerPage-1}_this.setState({currentPage:_this.getPageForIndex(nextTargetIndex),targetIndex:nextTargetIndex})},_this.handleItemPromiseFulfillment=function(payload){if(_this.mounted)return _this.props.itemToJSXConverter(payload)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Pagination,_React$PureComponent),_createClass(Pagination,[{key:"componentDidMount",value:function(){this.mounted=!0}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"componentDidUpdate",value:function(_,prevState){prevState.currentPage!==this.currentPage()&&__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_react_dom__.findDOMNode)(this.refs.item_0).focus()}},{key:"componentWillReceiveProps",value:function(){var _this2=this,oldProps=this.props;this.setState(function(state,props){return props.identifier!==oldProps.identifier?{currentPage:1,targetIndex:0}:{currentPage:_this2.getPageForIndex(state.targetIndex,props.numItemsPerPage),targetIndex:state.targetIndex}})}},{key:"generateControls",value:function(){var options=[],currentPage=this.currentPage(),totalPages=this.totalPages(),startPage=currentPage-(currentPage-1)%this.props.numPageToggles,endPage=Math.min(startPage+this.props.numPageToggles-1,totalPages);if(this.props.showPaginationState&&options.push({children:isFunction(this.props.showPaginationState)?this.props.showPaginationState(currentPage,totalPages):currentPage+" / "+totalPages,className:"b-pagination-control b-pagination-control-state",disabled:!0}),this.props.showJumpToFirstPageControl){var _options$push;options.push((_options$push={},_defineProperty(_options$push,Pagination.CONTROL_DATA_ATTRIBUTE,Pagination.control.FIRST),_defineProperty(_options$push,"children",this.props.jumpToFirstPageControlContent),_defineProperty(_options$push,"className","b-pagination-control b-pagination-control-first"),_defineProperty(_options$push,"disabled",1===currentPage),_options$push))}if(this.props.showJumpToPreviousPageControl){var _options$push2;options.push((_options$push2={},_defineProperty(_options$push2,Pagination.CONTROL_DATA_ATTRIBUTE,Pagination.control.PREVIOUS),_defineProperty(_options$push2,"children",this.props.jumpToPreviousPageControlContent),_defineProperty(_options$push2,"className","b-pagination-control b-pagination-control-previous"),_defineProperty(_options$push2,"disabled",1===currentPage),_options$push2))}for(var i=startPage;i<=endPage;i++){var _options$push3;options.push((_options$push3={},_defineProperty(_options$push3,Pagination.CONTROL_DATA_ATTRIBUTE,i),_defineProperty(_options$push3,"children",i),_defineProperty(_options$push3,"className","b-pagination-control"),_defineProperty(_options$push3,"pressed",currentPage===i),_options$push3))}if(this.props.showJumpToNextPageControl){var _options$push4;options.push((_options$push4={},_defineProperty(_options$push4,Pagination.CONTROL_DATA_ATTRIBUTE,Pagination.control.NEXT),_defineProperty(_options$push4,"children",this.props.jumpToNextPageControlContent),_defineProperty(_options$push4,"className","b-pagination-control b-pagination-control-next"),_defineProperty(_options$push4,"disabled",currentPage===totalPages),_options$push4))}if(this.props.showJumpToLastPageControl){var _options$push5;options.push((_options$push5={},_defineProperty(_options$push5,Pagination.CONTROL_DATA_ATTRIBUTE,Pagination.control.LAST),_defineProperty(_options$push5,"children",this.props.jumpToLastPageControlContent),_defineProperty(_options$push5,"className","b-pagination-control b-pagination-control-last"),_defineProperty(_options$push5,"disabled",currentPage===totalPages),_options$push5))}return this.props.customControlContent&&options.push({children:this.props.customControlContent,className:"b-pagination-control b-pagination-control-custom",disabled:!0}),options}},{key:"generateItems",value:function(){for(var items=[],firstIndex=this.firstVisibleItemIndex(),lastIndex=Math.min(this.props.totalItems,firstIndex+this.props.numItemsPerPage)-1,i=firstIndex;i<=lastIndex;i+=1)items.push(this.props.getItem(i));return items}},{key:"renderItems",value:function(){var _this3=this,props=this.props.itemWrapperProps;return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_6_boundless_arrow_key_navigation__.a,_extends({},props,{className:__WEBPACK_IMPORTED_MODULE_3_classnames___default()("b-pagination-items",props.className)}),this.generateItems().map(function(item,index){return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4_boundless_async__.a,{ref:0===index?"item_0":null,key:index,className:__WEBPACK_IMPORTED_MODULE_3_classnames___default()("b-pagination-item",{"b-pagination-item-even":index%2===0,"b-pagination-item-odd":index%2!==0}),"data-pagination-index":_this3.props.numItemsPerPage*(_this3.currentPage()-1)+index,pendingContent:_this3.props.itemLoadingContent},item instanceof Promise?item.then(_this3.handleItemPromiseFulfillment,_this3.handleItemPromiseFulfillment):_this3.props.itemToJSXConverter(item))}))}},{key:"renderControls",value:function(position){var _cx;if(!(this.props.hidePagerIfNotNeeded&&this.props.totalItems<=this.props.numItemsPerPage))return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_5_boundless_segmented_control__.a,_extends({},this.props.controlWrapperProps,{className:__WEBPACK_IMPORTED_MODULE_3_classnames___default()("b-pagination-controls",this.props.controlWrapperProps.className,(_cx={},_defineProperty(_cx,"b-pagination-controls-above",position===Pagination.position.ABOVE),_defineProperty(_cx,"b-pagination-controls-below",position===Pagination.position.BELOW),_cx)),options:this.generateControls(),onOptionSelected:this.handlePageSelected}))}},{key:"renderView",value:function(){var position=this.props.position,p=Pagination.position;return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("div",{className:"b-pagination"},position===p.ABOVE||position===p.BOTH?this.renderControls(p.ABOVE):null,this.props.before,this.renderItems(),this.props.after,position===p.BELOW||position===p.BOTH?this.renderControls(p.BELOW):null)}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("div",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_boundless_utils_omit_keys__.a)(this.props,Pagination.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_3_classnames___default()("b-pagination-wrapper",this.props.className)}),this.renderView())}}]),Pagination}(__WEBPACK_IMPORTED_MODULE_1_react___default.a.PureComponent);Pagination.control={CUSTOM:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)(),FIRST:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)(),LAST:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)(),NEXT:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)(),PREVIOUS:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)()},Pagination.position={ABOVE:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)(),BELOW:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)(),BOTH:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)()},Pagination.CONTROL_DATA_ATTRIBUTE="data-page-control",Pagination.propTypes={"*":__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.any,after:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.node,before:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.node,controlWrapperProps:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.any}),customControlContent:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.node,getItem:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.func.isRequired,hidePagerIfNotNeeded:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.bool,identifier:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.string.isRequired,initialPage:function(props){if(__WEBPACK_IMPORTED_MODULE_0_lodash_isInteger___default()(props.initialPage)===!1)return new Error("`initialPage` must be an integer.");var numberOfPages=Math.ceil(props.totalItems/props.numItemsPerPage);return props.initialPage<1||props.initialPage>numberOfPages?new Error("`initialPage` must be between 1 and "+numberOfPages+"."):void 0},itemLoadingContent:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.node,itemToJSXConverter:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.func,itemWrapperProps:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.any}),jumpToFirstPageControlContent:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.node,jumpToLastPageControlContent:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.node,jumpToNextPageControlContent:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.node,jumpToPreviousPageControlContent:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.node,numItemsPerPage:function(props){return __WEBPACK_IMPORTED_MODULE_0_lodash_isInteger___default()(props.numItemsPerPage)===!1?new Error("`numItemsPerPage` must be an integer."):props.numItemsPerPage<1?new Error("`numItemsPerPage` must be greater than zero."):void 0},numPageToggles:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.number,position:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.oneOf([Pagination.position.ABOVE,Pagination.position.BELOW,Pagination.position.BOTH]),showJumpToFirstPageControl:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.bool,showJumpToLastPageControl:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.bool,showJumpToNextPageControl:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.bool,showJumpToPreviousPageControl:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.bool,showPaginationState:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.bool,__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.func]),totalItems:__WEBPACK_IMPORTED_MODULE_1_react__.PropTypes.number.isRequired},Pagination.defaultProps={after:null,before:null,controlWrapperProps:{},customControlContent:null,getItem:noop,hidePagerIfNotNeeded:!1,identifier:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_uuid__.a)(),initialPage:1,itemLoadingContent:void 0,itemToJSXConverter:identity,itemWrapperProps:{},jumpToFirstPageControlContent:"⇤",jumpToLastPageControlContent:"⇥",jumpToNextPageControlContent:"→",jumpToPreviousPageControlContent:"←",numItemsPerPage:10,numPageToggles:5,position:Pagination.position.ABOVE,showJumpToFirstPageControl:!0,showJumpToLastPageControl:!0,showJumpToNextPageControl:!0,showJumpToPreviousPageControl:!0,showPaginationState:!0,totalItems:null},Pagination.internalKeys=Object.keys(Pagination.defaultProps),__webpack_exports__.a=Pagination},"./packages/boundless-pagination/node_modules/lodash/_Symbol.js":function(module,exports,__webpack_require__){var root=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/_root.js"),_Symbol=root.Symbol;module.exports=_Symbol},"./packages/boundless-pagination/node_modules/lodash/_baseGetTag.js":function(module,exports,__webpack_require__){function baseGetTag(value){return null==value?void 0===value?undefinedTag:nullTag:symToStringTag&&symToStringTag in Object(value)?getRawTag(value):objectToString(value)}var _Symbol=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/_Symbol.js"),getRawTag=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/_getRawTag.js"),objectToString=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/_objectToString.js"),nullTag="[object Null]",undefinedTag="[object Undefined]",symToStringTag=_Symbol?_Symbol.toStringTag:void 0;module.exports=baseGetTag},"./packages/boundless-pagination/node_modules/lodash/_freeGlobal.js":function(module,exports,__webpack_require__){(function(global){var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},freeGlobal="object"==(void 0===global?"undefined":_typeof(global))&&global&&global.Object===Object&&global;module.exports=freeGlobal}).call(exports,__webpack_require__("./node_modules/webpack/buildin/global.js"))},"./packages/boundless-pagination/node_modules/lodash/_getRawTag.js":function(module,exports,__webpack_require__){function getRawTag(value){var isOwn=hasOwnProperty.call(value,symToStringTag),tag=value[symToStringTag];try{value[symToStringTag]=void 0;var unmasked=!0}catch(e){}var result=nativeObjectToString.call(value);return unmasked&&(isOwn?value[symToStringTag]=tag:delete value[symToStringTag]),result}var _Symbol=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/_Symbol.js"),objectProto=Object.prototype,hasOwnProperty=objectProto.hasOwnProperty,nativeObjectToString=objectProto.toString,symToStringTag=_Symbol?_Symbol.toStringTag:void 0;module.exports=getRawTag},"./packages/boundless-pagination/node_modules/lodash/_objectToString.js":function(module,exports){function objectToString(value){return nativeObjectToString.call(value)}var objectProto=Object.prototype,nativeObjectToString=objectProto.toString;module.exports=objectToString},"./packages/boundless-pagination/node_modules/lodash/_root.js":function(module,exports,__webpack_require__){var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},freeGlobal=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/_freeGlobal.js"),freeSelf="object"==("undefined"==typeof self?"undefined":_typeof(self))&&self&&self.Object===Object&&self,root=freeGlobal||freeSelf||Function("return this")();module.exports=root},"./packages/boundless-pagination/node_modules/lodash/isInteger.js":function(module,exports,__webpack_require__){function isInteger(value){return"number"==typeof value&&value==toInteger(value)}var toInteger=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/toInteger.js");module.exports=isInteger},"./packages/boundless-pagination/node_modules/lodash/isObject.js":function(module,exports){function isObject(value){var type=void 0===value?"undefined":_typeof(value);return null!=value&&("object"==type||"function"==type)}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};module.exports=isObject},"./packages/boundless-pagination/node_modules/lodash/isObjectLike.js":function(module,exports){function isObjectLike(value){return null!=value&&"object"==(void 0===value?"undefined":_typeof(value))}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};module.exports=isObjectLike},"./packages/boundless-pagination/node_modules/lodash/isSymbol.js":function(module,exports,__webpack_require__){function isSymbol(value){return"symbol"==(void 0===value?"undefined":_typeof(value))||isObjectLike(value)&&baseGetTag(value)==symbolTag}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},baseGetTag=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/_baseGetTag.js"),isObjectLike=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/isObjectLike.js"),symbolTag="[object Symbol]";module.exports=isSymbol},"./packages/boundless-pagination/node_modules/lodash/toFinite.js":function(module,exports,__webpack_require__){function toFinite(value){if(!value)return 0===value?value:0;if(value=toNumber(value),value===INFINITY||value===-INFINITY){return(value<0?-1:1)*MAX_INTEGER}return value===value?value:0}var toNumber=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/toNumber.js"),INFINITY=1/0,MAX_INTEGER=1.7976931348623157e308;module.exports=toFinite},"./packages/boundless-pagination/node_modules/lodash/toInteger.js":function(module,exports,__webpack_require__){function toInteger(value){var result=toFinite(value),remainder=result%1;return result===result?remainder?result-remainder:result:0}var toFinite=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/toFinite.js");module.exports=toInteger},"./packages/boundless-pagination/node_modules/lodash/toNumber.js":function(module,exports,__webpack_require__){function toNumber(value){if("number"==typeof value)return value;if(isSymbol(value))return NAN;if(isObject(value)){var other="function"==typeof value.valueOf?value.valueOf():value;value=isObject(other)?other+"":other}if("string"!=typeof value)return 0===value?value:+value;value=value.replace(reTrim,"");var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value}var isObject=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/isObject.js"),isSymbol=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/isSymbol.js"),NAN=NaN,reTrim=/^\s+|\s+$/g,reIsBadHex=/^[-+]0x[0-9a-f]+$/i,reIsBinary=/^0b[01]+$/i,reIsOctal=/^0o[0-7]+$/i,freeParseInt=parseInt;module.exports=toNumber},"./packages/boundless-popover/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}function getOppositeCardinal(direction){switch(direction[0]){case"N":return"S";case"S":return"N";case"E":return"W"}return"E"}function without(arr1,arr2){return arr1.filter(function(item){return arr2.indexOf(item)===-1})}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_react_dom__=__webpack_require__(1),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_dom__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_boundless_dialog__=__webpack_require__("./packages/boundless-dialog/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_portal__=__webpack_require__("./packages/boundless-portal/index.js"),__WEBPACK_IMPORTED_MODULE_5_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_6_boundless_utils_transform_property__=__webpack_require__("./packages/boundless-utils-transform-property/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),CLASS_REMOVAL_REGEX=/\s?b-popover-(anchor|self)-(start|middle|end)/g,DEFAULT_CARET_COMPONENT=__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("svg",{viewBox:"0 0 14 9.5",xmlns:"http://www.w3.org/2000/svg"},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("g",null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("polygon",{className:"b-popover-caret-border",fill:"#000",points:"7 0 14 10 0 10"}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("polygon",{className:"b-popover-caret-fill",fill:"#FFF",points:"6.98230444 1.75 12.75 10 1.25 10"}))),START=0,MIDDLE=1,END=2,combinations=[{name:"NNW",ax:START,ay:START,dx:START,dy:END},{name:"N",ax:MIDDLE,ay:START,dx:MIDDLE,dy:END},{name:"NNE",ax:END,ay:START,dx:END,dy:END},{name:"ENE",ax:END,ay:START,dx:START,dy:START},{name:"E",ax:END,ay:MIDDLE,dx:START,dy:MIDDLE},{name:"ESE",ax:END,ay:END,dx:START,dy:END},{name:"SSE",ax:END,ay:END,dx:END,dy:START},{name:"S",ax:MIDDLE,ay:END,dx:MIDDLE,dy:START},{name:"SSW",ax:START,ay:END,dx:START,dy:START},{name:"WSW",ax:START,ay:END,dx:END,dy:END},{name:"W",ax:START,ay:MIDDLE,dx:END,dy:MIDDLE},{name:"WNW",ax:START,ay:START,dx:END,dy:START}],Popover=function(_React$PureComponent){function Popover(){var _ref,_temp,_this,_ret;_classCallCheck(this,Popover);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Popover.__proto__||Object.getPrototypeOf(Popover)).call.apply(_ref,[this].concat(args))),_this.align=function(){var anchor=_this.props.anchor instanceof HTMLElement?_this.props.anchor:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react_dom__.findDOMNode)(_this.props.anchor),caretAnchor=_this.props.caretAnchor?_this.props.caretAnchor instanceof HTMLElement?_this.props.caretAnchor:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react_dom__.findDOMNode)(_this.props.caretAnchor):anchor;_this.cacheViewportCartography(anchor,caretAnchor);var preset=_this.getValidAlignmentPreset(),frag=Popover.getAlignmentClassFragment;_this.dialog.$wrapper.className=_this.dialog.$wrapper.className.replace(CLASS_REMOVAL_REGEX,"")+" b-popover-anchor-x-"+frag(preset.ax)+" b-popover-anchor-y-"+frag(preset.ay)+" b-popover-self-x-"+frag(preset.dx)+" b-popover-self-y-"+frag(preset.dy);var dx=Math.round(_this.getNextDialogXPosition(preset)),dy=Math.round(_this.getNextDialogYPosition(preset));_this.dialog.$wrapper.style[__WEBPACK_IMPORTED_MODULE_6_boundless_utils_transform_property__.a]="translate("+dx+"px, "+dy+"px)";var cardinal=preset.name[0],longitudinal="N"===cardinal||"S"===cardinal;_this.$caret.style[longitudinal?"left":"top"]=Math.round(_this.getNextCaretXPosition(preset))+"px",_this.$caret.style[longitudinal?"top":"left"]="0px"},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Popover,_React$PureComponent),_createClass(Popover,[{key:"cacheViewportCartography",value:function(anchor,caretAnchor){var bodyRect=document.body.getBoundingClientRect();this.anchorRect=anchor.getBoundingClientRect(),this.caretAnchorRect=caretAnchor.getBoundingClientRect(),this.bodyLeft=bodyRect.left*-1,this.bodyTop=bodyRect.top*-1}},{key:"getNextCaretXPosition",value:function(_ref2){var name=_ref2.name,dx=(_ref2.ax,_ref2.dx),dy=(_ref2.ay,_ref2.dy),caret=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.$caret,nextX=0;return"N"===name[0]||"S"===name[0]?(nextX=this.caretAnchorRect.left-this.anchorRect.left+this.caretAnchorRect.width/2,dx===MIDDLE?nextX+=(this.dialog.$wrapper.clientWidth-this.anchorRect.width)/2:dx===END&&(nextX+=this.dialog.$wrapper.clientWidth-this.anchorRect.width)):(nextX=this.caretAnchorRect.top-this.anchorRect.top+this.caretAnchorRect.height/2,dy===MIDDLE?nextX+=(this.dialog.$wrapper.clientHeight-this.anchorRect.height)/2:dy===END&&(nextX+=this.dialog.$wrapper.clientHeight-this.anchorRect.height)),nextX-=caret.clientWidth/2}},{key:"getNextDialogXPosition",value:function(_ref3){var ax=_ref3.ax,dx=_ref3.dx,dialog=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.dialog.$wrapper,nextX=this.anchorRect.left+this.bodyLeft;switch(ax){case MIDDLE:nextX+=this.anchorRect.width/2;break;case END:nextX+=this.anchorRect.width}switch(dx){case MIDDLE:nextX-=dialog.clientWidth/2;break;case END:nextX-=dialog.clientWidth}return nextX}},{key:"getNextDialogYPosition",value:function(_ref4){var ay=_ref4.ay,dy=_ref4.dy,dialog=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.dialog.$wrapper,nextY=this.anchorRect.top+this.bodyTop;switch(ay){case MIDDLE:nextY+=this.anchorRect.height/2;break;case END:nextY+=this.anchorRect.height}switch(dy){case MIDDLE:nextY-=dialog.clientHeight/2;break;case END:nextY-=dialog.clientHeight}return nextY}},{key:"isPositionValid",value:function(_ref5,pHeight,pWidth){var name=_ref5.name,ax=_ref5.ax,ay=_ref5.ay,cardinal=(_ref5.dx,_ref5.dy,name[0]);return"N"===cardinal||"S"===cardinal?!("N"===cardinal&&this.anchorRect.top-pHeight<0)&&(!("S"===cardinal&&this.anchorRect.bottom+pHeight>window.innerHeight)&&(ax===START?!(this.anchorRect.left+pWidth>window.innerWidth||this.anchorRect.left<0):ax===MIDDLE?!(this.anchorRect.left-pWidth/2<0||this.anchorRect.left+pWidth/2>window.innerWidth):!(this.anchorRect.left-pWidth<0||this.anchorRect.right>window.innerWidth))):"W"!==cardinal&&"E"!==cardinal||!("W"===cardinal&&this.anchorRect.left-pWidth<0)&&(!("E"===cardinal&&this.anchorRect.right+pWidth>window.innerWidth)&&(ay===START?!(this.anchorRect.top+pHeight>window.innerHeight||this.anchorRect.top<0):ay===MIDDLE?!(this.anchorRect.top+this.anchorRect.height/2-pHeight/2<0||this.anchorRect.top+this.anchorRect.height/2+pHeight/2>window.innerHeight):!(this.anchorRect.top-pHeight<0||this.anchorRect.bottom>window.innerHeight)))}},{key:"getValidAlignmentPreset",value:function(){var _this2=this,width=this.dialog.$wrapper.clientWidth,height=this.dialog.$wrapper.clientHeight,validCombos=combinations.filter(function(config){return _this2.isPositionValid(config,height,width)});if(validCombos.indexOf(this.props.preset)!==-1||!this.props.autoReposition||!validCombos.length)return this.props.preset;var bestCombos=validCombos.filter(function(_ref6){return _ref6.name[0]===_this2.props.preset.name[0]});if(bestCombos.length)return bestCombos[0];var oppositeCardinal=getOppositeCardinal(this.props.preset.name),okayCombos=validCombos.filter(function(_ref7){return _ref7.name[0]===oppositeCardinal});return okayCombos.length?okayCombos[0]:validCombos[0]}},{key:"componentDidMount",value:function(){this.align(),window.addEventListener("resize",this.align,!0)}},{key:"componentDidUpdate",value:function(){this.align()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.align,!0)}},{key:"render",value:function(){var _this3=this,props=this.props;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4_boundless_portal__.a,props.portalProps,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3_boundless_dialog__.a,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_boundless_utils_omit_keys__.a)(props,Popover.internalKeys),{ref:function(instance){return _this3.dialog=instance},before:__WEBPACK_IMPORTED_MODULE_0_react___default.a.cloneElement(props.caretComponent,{ref:function(node){return _this3.$caret=node},className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-popover-caret",props.caretComponent.props.className)}),className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-popover",props.className)})))}}],[{key:"getAlignmentClassFragment",value:function(constant){switch(constant){case START:return"start";case MIDDLE:return"middle";case END:return"end"}}}]),Popover}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Popover.preset=combinations.reduce(function(map,def){return map[def.name]=def,map},{}),Popover.propTypes=_extends({},__WEBPACK_IMPORTED_MODULE_3_boundless_dialog__.a.propTypes,{anchor:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.instanceOf(HTMLElement),__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({props:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.object})]).isRequired,autoReposition:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,caretAnchor:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.instanceOf(HTMLElement),__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({props:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.object})]),caretComponent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.element,portalProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape(__WEBPACK_IMPORTED_MODULE_4_boundless_portal__.a.PropTypes),preset:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOf([Popover.preset.NNW,Popover.preset.N,Popover.preset.NNE,Popover.preset.ENE,Popover.preset.E,Popover.preset.ESE,Popover.preset.SSE,Popover.preset.S,Popover.preset.SSW,Popover.preset.WSW,Popover.preset.W,Popover.preset.WNW])}),Popover.defaultProps=_extends({},__WEBPACK_IMPORTED_MODULE_3_boundless_dialog__.a.defaultProps,{anchor:void 0,autoReposition:!0,captureFocus:!1,caretAnchor:void 0,caretComponent:DEFAULT_CARET_COMPONENT,closeOnEscKey:!0,closeOnOutsideClick:!0,closeOnOutsideScroll:!0,portalProps:{},preset:Popover.preset.S}),Popover.internalKeys=without(Object.keys(Popover.defaultProps),__WEBPACK_IMPORTED_MODULE_3_boundless_dialog__.a.internalKeys),__webpack_exports__.a=Popover},"./packages/boundless-portal/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_react_dom__=__webpack_require__(1),__WEBPACK_IMPORTED_MODULE_1_react_dom___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_dom__),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),Portal=function(_React$Component){function Portal(){var _ref,_temp,_this,_ret;_classCallCheck(this,Portal);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Portal.__proto__||Object.getPrototypeOf(Portal)).call.apply(_ref,[this].concat(args))),_this.id=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)(),_this.$portal=null,_this.$passenger=null,_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Portal,_React$Component),_createClass(Portal,[{key:"componentWillMount",value:function(){this.$portal=document.createElement("div"),this.props.destination.appendChild(this.$portal),this.renderPortalledContent()}},{key:"renderPortalledContent",value:function(){var child=__WEBPACK_IMPORTED_MODULE_0_react___default.a.isValidElement(this.props.children)?this.props.children:__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",null,this.props.children);this.$portal.id=this.props.portalId||this.id,__WEBPACK_IMPORTED_MODULE_1_react_dom___default.a.unstable_renderSubtreeIntoContainer(this,child,this.$portal),this.$passenger=this.$portal.children[0]}},{key:"componentDidUpdate",value:function(){this.renderPortalledContent()}},{key:"componentWillUnmount",value:function(){__WEBPACK_IMPORTED_MODULE_1_react_dom___default.a.unmountComponentAtNode(this.$portal),this.props.destination.removeChild(this.$portal)}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("span",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props,Portal.internalKeys),_defineProperty({},Portal.PORTAL_DATA_ATTRIBUTE,this.props.portalId||this.id)))}}]),Portal}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);Portal.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,children:__WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.node,destination:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.instanceOf(HTMLElement),portalId:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string},Portal.defaultProps={children:null,destination:document.body,portalId:null},Portal.internalKeys=Object.keys(Portal.defaultProps),Portal.PORTAL_DATA_ATTRIBUTE="data-portal-id",__webpack_exports__.a=Portal},"./packages/boundless-progress/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_button__=__webpack_require__("./packages/boundless-button/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),Progress=function(_React$PureComponent){function Progress(){return _classCallCheck(this,Progress),_possibleConstructorReturn(this,(Progress.__proto__||Object.getPrototypeOf(Progress)).apply(this,arguments))}return _inherits(Progress,_React$PureComponent),_createClass(Progress,[{key:"renderCancel",value:function(){if(this.props.onCancel)return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2_boundless_button__.a,_extends({},this.props.cancelProps,{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-progress-cancel",this.props.cancelProps.className),component:this.props.cancelComponent,onPressed:this.props.onCancel}))}},{key:"renderProgress",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.progressComponent,_extends({},this.props.progressProps,{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-progress",this.props.progressProps.className,{"b-progress-indeterminate":void 0===this.props.progress}),role:"presentation",style:_extends({},this.props.progressProps.style,_defineProperty({},this.props.tweenProperty,this.props.progress))}))}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(this.props,Progress.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-progress-wrapper",this.props.className),"data-progress":void 0!==this.props.progress?this.props.progress:null}),this.renderProgress(),this.props.children,this.renderCancel())}}]),Progress}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Progress.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,cancelComponent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),cancelProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,onCancel:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,progress:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.number]),progressComponent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,progressProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),tweenProperty:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string},Progress.defaultProps={cancelComponent:"button",cancelProps:{},component:"div",onCancel:null,progress:void 0,progressComponent:"div",progressProps:{},tweenProperty:"width"},Progress.internalKeys=Object.keys(Progress.defaultProps),__webpack_exports__.a=Progress},"./packages/boundless-progressive-disclosure/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},noop=function(){},ProgressiveDisclosure=function(_React$PureComponent){function ProgressiveDisclosure(){var _ref,_temp,_this,_ret;_classCallCheck(this,ProgressiveDisclosure);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=ProgressiveDisclosure.__proto__||Object.getPrototypeOf(ProgressiveDisclosure)).call.apply(_ref,[this].concat(args))),_this.state={expanded:_this.props.expanded},_this.fireStatefulCallback=function(){return _this.props[_this.state.expanded?"onExpand":"onHide"]()},_this.handleClick=function(event){_this.setState({expanded:!_this.state.expanded},_this.fireStatefulCallback),isFunction(_this.props.toggleProps.onClick)&&_this.props.toggleProps.onClick(event)},_this.handleKeyDown=function(event){"Enter"===event.key&&(event.preventDefault(),_this.setState({expanded:!_this.state.expanded},_this.fireStatefulCallback)),isFunction(_this.props.toggleProps.onKeyDown)&&_this.props.toggleProps.onKeyDown(event)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(ProgressiveDisclosure,_React$PureComponent),_createClass(ProgressiveDisclosure,[{key:"componentWillReceiveProps",value:function(newProps){newProps.expanded!==this.props.expanded&&this.setState({expanded:newProps.expanded},this.fireStatefulCallback)}},{key:"renderContent",value:function(){if(this.state.expanded)return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",{className:"b-disclosure-content"},isFunction(this.props.children)?this.props.children():this.props.children)}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props,ProgressiveDisclosure.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-disclosure",this.props.className,{"b-disclosure-expanded":this.state.expanded})}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.toggleComponent,_extends({},this.props.toggleProps,{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-disclosure-toggle",this.props.toggleProps.className),onClick:this.handleClick,onKeyDown:this.handleKeyDown,tabIndex:"0"}),this.state.expanded?this.props.toggleExpandedContent||this.props.toggleContent:this.props.toggleContent),this.renderContent())}}]),ProgressiveDisclosure}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);ProgressiveDisclosure.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,children:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.arrayOf(__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node),__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,expanded:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,onExpand:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onHide:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,toggleComponent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,toggleContent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,toggleExpandedContent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,toggleProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any})},ProgressiveDisclosure.defaultProps={children:null,component:"div",expanded:!1,onExpand:noop,onHide:noop,toggleComponent:"div",toggleContent:null,toggleExpandedContent:null,toggleProps:{}},ProgressiveDisclosure.internalKeys=Object.keys(ProgressiveDisclosure.defaultProps),__webpack_exports__.a=ProgressiveDisclosure},"./packages/boundless-radio/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},Radio=function(_React$PureComponent){function Radio(){var _ref,_temp,_this,_ret;_classCallCheck(this,Radio);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Radio.__proto__||Object.getPrototypeOf(Radio)).call.apply(_ref,[this].concat(args))),_this.uuid=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_uuid__.a)(),_this.handleChange=function(event){event.target.checked&&_this.props.onSelected(event.target.value),isFunction(_this.props.inputProps.onChange)&&_this.props.inputProps.onChange(event)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Radio,_React$PureComponent),_createClass(Radio,[{key:"renderInput",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("input",_extends({},this.props.inputProps,{type:"radio",id:this.props.id||this.props.inputProps.id||this.uuid,className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-radio",this.props.inputProps.className,{"b-radio-selected":this.props.selected}),name:this.props.name,value:this.props.value,checked:this.props.selected,"aria-checked":String(this.props.selected),onChange:this.handleChange}))}},{key:"renderLabel",value:function(){if(this.props.labelContent)return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("label",_extends({},this.props.labelProps,{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-radio-label",this.props.labelProps.className),htmlFor:this.props.id||this.props.inputProps.id||this.uuid}),this.props.labelContent)}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_boundless_utils_omit_keys__.a)(this.props,Radio.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-radio-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]),Radio}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Radio.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,component:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,inputProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),labelContent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.arrayOf(__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node)]),labelProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),name:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string.isRequired,onSelected:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,selected:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,value:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string.isRequired},Radio.defaultProps={component:"div",inputProps:{},labelContent:null,labelProps:{},name:"",onSelected:function(){},selected:!1,value:""},Radio.internalKeys=Object.keys(Radio.defaultProps),__webpack_exports__.a=Radio},"./packages/boundless-segmented-control/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}function findIndex(arr,test){for(var found=void 0,i=0,len=arr.length;i<len;i+=1)if(test(arr[i])){found=i;break}return found}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_arrow_key_navigation__=__webpack_require__("./packages/boundless-arrow-key-navigation/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_button__=__webpack_require__("./packages/boundless-button/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),SegmentedControl=function(_React$PureComponent){function SegmentedControl(){var _ref,_temp,_this,_ret;_classCallCheck(this,SegmentedControl);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=SegmentedControl.__proto__||Object.getPrototypeOf(SegmentedControl)).call.apply(_ref,[this].concat(args))),_this.state={selectedIndex:null},_this.handleOptionSelection=function(event){var index=Array.prototype.indexOf.call(event.target.parentElement.children,event.target);_this.state.selectedIndex!==index&&_this.setState({selectedIndex:index},function(){_this.props.onOptionSelected(_this.props.options[_this.state.selectedIndex],_this.state.selectedIndex)})},_this.getSelectedOption=function(){return _this.props.options[_this.state.selectedIndex]},_this.getSelectedOptionIndex=function(){return _this.state.selectedIndex},_this.selectOption=function(option){return _this.setState({selectedIndex:_this.props.options.indexOf(option)})},_this.selectOptionByKey=function(k,v){return _this.setState({selectedIndex:findIndex(_this.props.options,function(option){return option[k]===v})})},_this.selectOptionIndex=function(index){return _this.setState({selectedIndex:index})},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(SegmentedControl,_React$PureComponent),_createClass(SegmentedControl,[{key:"inferSelectedOptionIndex",value:function(){var props=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props,state=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.state;return findIndex(props.options,function(option){return option.pressed})||state.selectedIndex}},{key:"componentWillMount",value:function(){this.setState({selectedIndex:this.inferSelectedOptionIndex()||this.props.defaultOptionSelectedIndex})}},{key:"componentWillReceiveProps",value:function(nextProps){nextProps.options!==this.props.options&&this.setState({selectedIndex:this.inferSelectedOptionIndex(nextProps)})}},{key:"render",value:function(){var _this2=this;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2_boundless_arrow_key_navigation__.a,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_omit_keys__.a)(this.props,SegmentedControl.internalKeys),{role:"radiogroup",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-segmented-control",this.props.className),mode:__WEBPACK_IMPORTED_MODULE_2_boundless_arrow_key_navigation__.a.mode.HORIZONTAL}),this.props.options.map(function(props,index){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3_boundless_button__.a,_extends({},props,{key:props.key||index,"aria-checked":index===_this2.state.selectedIndex,component:props.component||_this2.props.optionComponent,className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-segmented-control-option",props.className,{"b-segmented-control-option-selected":index===_this2.state.selectedIndex}),onPressed:_this2.handleOptionSelection,pressed:index===_this2.state.selectedIndex,role:"radio"}),props.children)}))}}]),SegmentedControl}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);SegmentedControl.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,defaultOptionSelectedIndex:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.number,onOptionSelected:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,optionComponent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func]),options:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.arrayOf(__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any,children:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.node})).isRequired},SegmentedControl.defaultProps={defaultOptionSelectedIndex:0,onOptionSelected:function(){},optionComponent:"button",options:[]},SegmentedControl.internalKeys=Object.keys(SegmentedControl.defaultProps),__webpack_exports__.a=SegmentedControl},"./packages/boundless-tokenized-input/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_boundless_typeahead__=__webpack_require__("./packages/boundless-typeahead/index.js"),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_object_intersection__=__webpack_require__("./packages/boundless-utils-object-intersection/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),first=function(array){return array[0]},last=function(array){return array[array.length-1]},isFunction=function(x){return"function"==typeof x},TokenizedInput=function(_React$PureComponent){function TokenizedInput(){var _ref,_temp,_this,_ret;_classCallCheck(this,TokenizedInput);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=TokenizedInput.__proto__||Object.getPrototypeOf(TokenizedInput)).call.apply(_ref,[this].concat(args))),_this.focus=function(){return _this.refs.typeahead.focus()},_this.getInputNode=function(){return _this.refs.typeahead.getInputNode()},_this.getSelectedEntityText=function(){return _this.refs.typeahead.getSelectedEntityText()},_this.getValue=function(){return _this.refs.typeahead.getValue()},_this.select=function(){return _this.refs.typeahead.select()},_this.setValue=function(value){return _this.refs.typeahead.setValue(value)},_this.add=function(index){_this.props.tokens.indexOf(index)===-1&&_this.props.handleAddToken(index)},_this.handleInputClick=function(event){_this.clearSelection(),isFunction(_this.props.inputProps.onClick)&&_this.props.inputProps.onClick(event)},_this.handleInputFocus=function(event){_this.clearSelection(),isFunction(_this.props.inputProps.onFocus)&&_this.props.inputProps.onFocus(event)},_this.handleKeyDown=function(event){switch(event.which){case 37:_this.selectPreviousToken(event.shiftKey);break;case 39:_this.selectNextToken(event.shiftKey);break;case 8:_this.props.tokensSelected.length&&(_this.remove(_this.props.tokensSelected),_this.focus());break;case 65:event.metaKey&&(event.preventDefault(),_this.focus(),_this.select(),_this._suppressNextTokenSelection=!0,_this.props.handleNewSelection(_this.props.tokens))}isFunction(_this.props.onKeyDown)&&_this.props.onKeyDown(event)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(TokenizedInput,_React$PureComponent),_createClass(TokenizedInput,[{key:"componentDidUpdate",value:function(prevProps){var previousSelectedIndexes=prevProps.tokensSelected,currentSelectedIndexes=this.props.tokensSelected;if(this.props.tokens.length>prevProps.tokens.length&&this.setValue(""),this._suppressNextTokenSelection)return void(this._suppressNextTokenSelection=!1);if(previousSelectedIndexes!==currentSelectedIndexes&&0!==currentSelectedIndexes.length){if(1===currentSelectedIndexes.length||currentSelectedIndexes[0]!==previousSelectedIndexes[0])return this.refs["token_"+currentSelectedIndexes[0]].focus();if(last(currentSelectedIndexes)!==last(previousSelectedIndexes))return this.refs["token_"+last(currentSelectedIndexes)].focus();this.refs["token_"+currentSelectedIndexes[0]].focus()}}},{key:"remove",value:function(index){var _this2=this,indexes=(Array.isArray(index)?index:[index]).filter(function(idx){return _this2.props.tokens.indexOf(idx)!==-1});indexes.length&&this.props.handleRemoveTokens(indexes)}},{key:"selectToken",value:function(index){this.props.handleNewSelection([index])}},{key:"selectTokens",value:function(indexes){this.props.handleNewSelection(indexes)}},{key:"selectPreviousToken",value:function(append){var selected=this.props.tokensSelected,indexes=this.props.tokens;if(1!==selected.length||first(selected)!==first(indexes))if(0===selected.length)this.selectToken(last(indexes));else{var previousToken=indexes[indexes.indexOf(first(selected))-1];this.selectTokens(append?[previousToken].concat(selected):[previousToken])}}},{key:"selectNextToken",value:function(append){var selected=this.props.tokensSelected,indexes=this.props.tokens;if(0!==selected.length)if(last(selected)===last(indexes))this.clearSelection(),this.focus();else{var nextToken=indexes[indexes.indexOf(last(selected))+1];this.selectTokens(append?selected.concat(nextToken):[nextToken])}}},{key:"clearSelection",value:function(){this.props.handleNewSelection([])}},{key:"handleTokenCloseClick",value:function(index,event){event.stopPropagation(),this.remove(index),this.focus(),this.props.tokenCloseComponent.props.onClick&&this.props.tokenCloseComponent.props.onClick(event)}},{key:"renderTokenClose",value:function(index){if(this.props.tokenCloseVisible)return __WEBPACK_IMPORTED_MODULE_0_react___default.a.cloneElement(this.props.tokenCloseComponent,{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-tokenfield-token-close",this.props.tokenCloseComponent.props.className),onClick:this.handleTokenCloseClick.bind(this,index)})}},{key:"handleTokenKeyDown",value:function(index,event){switch(event.which){case 13:case 32:this.selectToken(index),event.preventDefault();break;case 8:this.remove(index),this.focus(),event.preventDefault()}}},{key:"renderTokens",value:function(){var _this3=this;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",{className:"b-tokenfield-tokens",role:"listbox"},this.props.tokens.map(function(index){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",{ref:"token_"+index,key:index,className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-tokenfield-token",{"b-tokenfield-token-selected":_this3.props.tokensSelected.indexOf(index)!==-1}),onClick:_this3.selectToken.bind(_this3,index),onKeyDown:_this3.handleTokenKeyDown.bind(_this3,index),role:"option",tabIndex:"0"},_this3.props.entities[index].text,_this3.renderTokenClose(index))}))}},{key:"render",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_omit_keys__.a)(this.props,TokenizedInput.internalKeys),{ref:"wrapper",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-tokenfield-wrapper",this.props.className),onKeyDown:this.handleKeyDown}),this.renderTokens(),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2_boundless_typeahead__.a,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_object_intersection__.a)(this.props,__WEBPACK_IMPORTED_MODULE_2_boundless_typeahead__.a.defaultProps),{ref:"typeahead",className:"b-tokenfield",clearOnSelection:!0,inputProps:_extends({},this.props.inputProps,{onClick:this.handleInputClick,onFocus:this.handleInputFocus}),onEntitySelected:this.add})))}}]),TokenizedInput}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);TokenizedInput.propTypes=_extends({},__WEBPACK_IMPORTED_MODULE_2_boundless_typeahead__.a.propTypes,{handleAddToken:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,handleRemoveTokens:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,handleNewSelection:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,tokenCloseComponent:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.element,tokenCloseVisible:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,tokens:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.arrayOf(__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.number),tokensSelected:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.arrayOf(__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.number)}),TokenizedInput.defaultProps=_extends({},__WEBPACK_IMPORTED_MODULE_2_boundless_typeahead__.a.defaultProps,{handleAddToken:function(){},handleRemoveTokens:function(){},handleNewSelection:function(){},tokenCloseComponent:__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",null,"X"),tokenCloseVisible:!0,tokens:[],tokensSelected:[]}),TokenizedInput.internalKeys=Object.keys(TokenizedInput.defaultProps),__webpack_exports__.a=TokenizedInput},"./packages/boundless-typeahead/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_0_react___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__),__WEBPACK_IMPORTED_MODULE_1_classnames__=__webpack_require__("./node_modules/classnames/index.js"),__WEBPACK_IMPORTED_MODULE_1_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__),__WEBPACK_IMPORTED_MODULE_2_escape_string_regexp__=__webpack_require__("./packages/boundless-typeahead/node_modules/escape-string-regexp/index.js"),__WEBPACK_IMPORTED_MODULE_2_escape_string_regexp___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_escape_string_regexp__),__WEBPACK_IMPORTED_MODULE_3_boundless_input__=__webpack_require__("./packages/boundless-input/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_object_intersection__=__webpack_require__("./packages/boundless-utils-object-intersection/index.js"),__WEBPACK_IMPORTED_MODULE_5_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_6_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},isString=function(x){return"string"==typeof x},noop=function(){},Typeahead=function(_React$PureComponent){function Typeahead(){var _ref,_temp,_this,_ret;_classCallCheck(this,Typeahead);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Typeahead.__proto__||Object.getPrototypeOf(Typeahead)).call.apply(_ref,[this].concat(args))),_initialiseProps.call(_this),_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Typeahead,_React$PureComponent),_createClass(Typeahead,[{key:"componentWillMount",value:function(){(this.props.inputProps.value||this.props.inputProps.defaultValue)&&this.computeMatches()}},{key:"componentDidMount",value:function(){this.mounted=!0,this.state.selectedEntityIndex>=0&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillReceiveProps",value:function(nextProps){nextProps.entities!==this.props.entities&&this.computeMatches(nextProps.entities),nextProps.inputProps.value!==this.props.inputProps.value&&(this.updateInputState(nextProps.inputProps.value),this.computeMatches())}},{key:"componentDidUpdate",value:function(prevProps,prevState){this.state.entityMatchIndexes.length&&!prevState.entityMatchIndexes.length&&(this.refs.matches.scrollTop=0),this.state.selectedEntityIndex>=0&&this.props.entities[this.state.selectedEntityIndex]!==prevProps.entities[prevState.selectedEntityIndex]&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"handleMatchClick",value:function(index){this.setState({selectedEntityIndex:index},this.setValueWithSelectedEntity)}},{key:"selectMatch",value:function(delta){var matches=this.state.entityMatchIndexes,totalMatches=matches.length,nextIndex=matches.indexOf(this.state.selectedEntityIndex)+delta;if(totalMatches){nextIndex<0?nextIndex=totalMatches-1:nextIndex>=totalMatches&&(nextIndex=0);var matchIndex=matches[nextIndex],matchesNode=this.refs.matches,matchesNodeYEnd=matchesNode.scrollTop+matchesNode.clientHeight,matchNode=this.refs["match_$"+matchIndex],matchNodeYStart=matchNode.offsetTop,matchNodeYEnd=matchNodeYStart+matchNode.clientHeight;matchNodeYEnd>=matchesNodeYEnd?matchesNode.scrollTop+=matchNodeYEnd-matchesNodeYEnd:matchNodeYStart<=matchesNode.scrollTop&&(matchesNode.scrollTop=matchNodeYStart),this.setState({selectedEntityIndex:matchIndex})}}},{key:"cursorAtEndOfInput",value:function(){var node=this.getInputNode();return node.selectionStart===node.selectionEnd&&node.selectionEnd===this.getValue().length}},{key:"markFuzzyMatchSubstring",value:function(input,entity){for(var entityContent=entity.text,frags=entityContent.split(new RegExp("("+__WEBPACK_IMPORTED_MODULE_2_escape_string_regexp___default()(input)+")","ig")),normalizedUserText=input.toLowerCase(),threshold=frags.length,i=-1;++i<threshold;)frags[i].toLowerCase()===normalizedUserText&&(frags[i]=__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("mark",{key:i,className:"b-typeahead-match-highlight"},frags[i]));return frags}},{key:"markStartsWithMatchSubstring",value:function(input,entity){var entityContent=entity.text,seekValue=input.toLowerCase(),indexStart=entityContent.toLowerCase().indexOf(seekValue),indexEnd=indexStart+seekValue.length;return[__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("span",{key:"0"},entityContent.slice(0,indexStart)),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("mark",{key:"1",className:"b-typeahead-match-highlight"},entityContent.slice(indexStart,indexEnd)),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("span",{key:"2"},entityContent.slice(indexEnd))]}},{key:"getMarkingFunction",value:function(){return isString(this.props.algorithm)?this.props.algorithm===Typeahead.mode.STARTS_WITH?this.markStartsWithMatchSubstring:this.markFuzzyMatchSubstring:isFunction(this.props.algorithm.marker)?this.props.algorithm.marker:(void 0===this.warnedMarker&&(this.warnedMarker=!0,console.warn("Typeahead: no `props.algorithm.marker` was provided; falling back to the default marking algorithm (FUZZY).")),this.markFuzzyMatchSubstring)}},{key:"getFuzzyMatchIndexes",value:function(userText,entities){var normalized=userText.toLowerCase();return entities.reduce(function(result,entity,index){return entity.text.toLowerCase().indexOf(normalized)!==-1?result.push(index)&&result:result},[])}},{key:"getStartsWithMatchIndexes",value:function(userText,entities){var seekValue=userText.toLowerCase();return entities.reduce(function(results,entity,index){return 0===entity.text.toLowerCase().indexOf(seekValue)&&results.push(index),results},[])}},{key:"getMatchingFunction",value:function(){return isString(this.props.algorithm)?this.props.algorithm===Typeahead.mode.STARTS_WITH?this.getStartsWithMatchIndexes:this.getFuzzyMatchIndexes:isFunction(this.props.algorithm.matcher)?this.props.algorithm.matcher:(void 0===this.warnedMatcher&&(this.warnedMatcher=!0,console.warn("Typeahead: no `props.algorithm.matcher` was provided; falling back to the default matching algorithm (FUZZY).")),this.getFuzzyMatchIndexes)}},{key:"computeMatches",value:function(providedEntities){var _this2=this;this.setState(function(state,props){var entities=providedEntities||props.entities,currentValue=state.input,matches=""===currentValue?[]:_this2.getMatchIndexes(currentValue,entities);return{selectedEntityIndex:matches.length?matches[0]:-1,entityMatchIndexes:matches}})}},{key:"renderNotification",value:function(){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",{ref:"aria",id:this.state.id,className:this.props.offscreenClass,"aria-live":"polite",role:"status"},this.getSelectedEntityText())}},{key:"renderHint",value:function(){if(this.props.hint){var userText=this.state.input,raw=this.getSelectedEntityText(),processed="";return raw&&0===raw.toLowerCase().indexOf(userText.toLowerCase())&&(processed=raw.replace(new RegExp(userText,"i"),userText)),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",_extends({},this.props.hintProps,{ref:"hint",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-input","b-input-placeholder","b-typeahead-hint",this.props.hintProps.className),tabIndex:"-1"}),processed)}}},{key:"renderMatches",value:function(){var _this3=this;if(this.state.entityMatchIndexes.length){var props=this.props.matchWrapperProps;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",_extends({},props,{ref:"matches",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-typeahead-match-wrapper",props.className),role:"listbox"}),this.state.entityMatchIndexes.map(function(index){var entity=_this3.props.entities[index],className=entity.className,text=entity.text,rest=_objectWithoutProperties(entity,["className","text"]);return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",_extends({},rest,{ref:"match_$"+index,className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-typeahead-match",className,{"b-typeahead-match-selected":_this3.state.selectedEntityIndex===index}),key:text,onClick:_this3.handleMatchClick.bind(_this3,index),role:"option"}),_this3.markMatchSubstring(_this3.state.input,entity))}))}}},{key:"render",value:function(){var props=this.props,state=this.state;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_boundless_utils_omit_keys__.a)(props,Typeahead.internalKeys),{ref:"wrapper",className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-typeahead-wrapper",props.className),onKeyDown:this.handleKeyDown}),this.renderNotification(),this.renderHint(),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3_boundless_input__.a,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_object_intersection__.a)(props,__WEBPACK_IMPORTED_MODULE_3_boundless_input__.a.defaultProps),{ref:"input","aria-controls":state.id,inputProps:_extends({},props.inputProps,{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()("b-typeahead",props.inputProps.className),onChange:this.handleChange})})),this.renderMatches())}}]),Typeahead}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.PureComponent);Typeahead.mode={STARTS_WITH:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_boundless_utils_uuid__.a)(),FUZZY:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_boundless_utils_uuid__.a)()},Typeahead.propTypes=_extends({},__WEBPACK_IMPORTED_MODULE_3_boundless_input__.a.propTypes,{algorithm:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY]),__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({marker:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY])]),matcher:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOfType([__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY])])})]),clearOnSelection:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,entities:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.arrayOf(__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({text:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string.isRequired})),hint:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.bool,hintProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),matchWrapperProps:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.shape({"*":__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.any}),offscreenClass:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.string,onComplete:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onEntityHighlighted:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func,onEntitySelected:__WEBPACK_IMPORTED_MODULE_0_react__.PropTypes.func}),Typeahead.defaultProps=_extends({},__WEBPACK_IMPORTED_MODULE_3_boundless_input__.a.defaultProps,{algorithm:Typeahead.mode.FUZZY,clearOnSelection:!1,entities:[],hint:null,hintProps:{},matchWrapperProps:{},offscreenClass:"b-offscreen",onComplete:noop,onEntityHighlighted:noop,onEntitySelected:noop}),Typeahead.internalKeys=Object.keys(Typeahead.defaultProps);var _initialiseProps=function(){var _this4=this;this.state={entityMatchIndexes:[],id:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_boundless_utils_uuid__.a)(),isControlled:isString(this.props.inputProps.value),input:this.props.inputProps.value||this.props.inputProps.defaultValue||"",selectedEntityIndex:-1},this.mounted=!1,this.updateInputState=function(){var value=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return _this4.setState({input:value})},this.getSelectedEntityText=function(){var entity=_this4.props.entities[_this4.state.selectedEntityIndex];return entity?entity.text:""},this.resetMatches=function(){_this4.mounted&&_this4.setState({selectedEntityIndex:-1,entityMatchIndexes:[]})},this.getInputNode=function(){return _this4.refs.input.refs.field},this.select=function(){var input=_this4.getInputNode();input.selectionStart=0,input.selectionEnd=_this4.getValue().length},this.focus=function(){return _this4.getInputNode().focus()},this.getValue=function(){return _this4.refs.input.getValue()},this.setValue=function(){var value=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";_this4.refs.input.setValue(value),_this4.updateInputState(value),_this4.resetMatches(),_this4.focus()},this.setValueWithSelectedEntity=function(){_this4.props.onEntitySelected(_this4.state.selectedEntityIndex),_this4.props.clearOnSelection?_this4.setValue(""):_this4.setValue(_this4.getSelectedEntityText()),window.setTimeout(_this4.resetMatches,0)},this.markMatchSubstring=function(){return _this4.getMarkingFunction().apply(void 0,arguments)},this.getMatchIndexes=function(){return _this4.getMatchingFunction().apply(void 0,arguments)},this.handleChange=function(event){_this4.state.isControlled===!1&&(_this4.updateInputState(event.target.value),_this4.computeMatches()),isFunction(_this4.props.inputProps.onChange)&&_this4.props.inputProps.onChange(event)},this.handleKeyDown=function(event){switch(event.key){case"ArrowLeft":event.target.selectionStart>1&&event.stopPropagation();break;case"Tab":case"ArrowRight":_this4.state.selectedEntityIndex!==-1&&_this4.cursorAtEndOfInput()&&_this4.getInputNode()===event.target&&!event.shiftKey&&(event.nativeEvent.preventDefault(),_this4.setValueWithSelectedEntity());break;case"ArrowUp":event.nativeEvent.preventDefault(),_this4.selectMatch(-1),_this4.focus();break;case"ArrowDown":event.nativeEvent.preventDefault(),_this4.selectMatch(1),_this4.focus();break;case"Escape":_this4.state.selectedEntityIndex!==-1&&_this4.getInputNode()===event.target&&_this4.resetMatches();break;case"Enter":_this4.state.selectedEntityIndex!==-1&&_this4.getInputNode()===event.target?(event.nativeEvent.preventDefault(),_this4.setValueWithSelectedEntity()):_this4.props.onComplete(_this4.state.input,event)}isFunction(_this4.props.onKeyDown)&&_this4.props.onKeyDown(event)}};__webpack_exports__.a=Typeahead},"./packages/boundless-typeahead/node_modules/escape-string-regexp/index.js":function(module,exports,__webpack_require__){"use strict";var matchOperatorsRe=/[|\\{}()[\]^$+*?.]/g;module.exports=function(str){if("string"!=typeof str)throw new TypeError("Expected a string");return str.replace(matchOperatorsRe,"\\$&")}},"./packages/boundless-utils-object-intersection/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function getIntersection(obj1,obj2){return Object.keys(obj2).reduce(function(childProps,key){return key in obj1&&(childProps[key]=obj1[key]),childProps},{})}__webpack_exports__.a=getIntersection},"./packages/boundless-utils-omit-keys/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function omitKeysFromSourceObject(source){var omittedKeys=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return Object.keys(source).reduce(function(hash,key){return omittedKeys.indexOf(key)===-1&&(hash[key]=source[key]),hash},{})}__webpack_exports__.a=omitKeysFromSourceObject},"./packages/boundless-utils-transform-property/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_exports__.a=function(){for(var props=["transform","WebkitTransform","MozTransform","OTransform","msTransform","webkit-transform"],i=0,len=props.length;i<len;i++)if(props[i]in document.documentElement.style)return props[i];return!1}()},"./packages/boundless-utils-uuid/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function uuid(){return"b-"+([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,function(a){return(a^16*Math.random()>>a/4).toString(16)})}__webpack_exports__.a=uuid},0:function(module,exports){module.exports=__WEBPACK_EXTERNAL_MODULE_0__},1:function(module,exports){module.exports=__WEBPACK_EXTERNAL_MODULE_1__}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,