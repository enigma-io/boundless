webpackJsonp([13,30],{498:function(n,e){n.exports="__A guide to creating a Boundless-ready React web app__\n\n> __Starting from scratch?__\n> Enigma's [React webapp generator for Yeoman](https://github.com/enigma-io/generator-enigma) is a nifty tool that allows you to generate a boilerplate React web app built to official Enigma standards (more detailed usage instructions are available in that repo).\n\n## Install Boundless\n\nSince Boundless is modular, you can use as little or as much of the library as you desire. We recommend starting out with all the components:\n\n```bash\nnpm install --save boundless\n```\n\nThe `--save` option updates `package.json` automatically.\n\nLater on if you wish to only use a few specific components, they can easily be installed separately:\n\n```bash\nnpm install --save boundless-button boundless-popover\n```\n\n## Add the Boundless CSS skin\n\nBoundless has default styles which can be imported into your CSS build tool of choice (we recommend [Stylus](http://stylus-lang.com/).)\n\n### If you're using Stylus\n\n```stylus\n// inside your main style.styl\n@import \"node_modules/boundless/style.styl\"\n```\n\nIf you want to do any custom theming, feel free to redeclare variables present in [style.styl](https://github.com/enigma-io/boundless/blob/master/style.styl) above where you are importing it, like:\n\n```stylus\ncolor-accent = royalblue\n\n@import \"node_modules/boundless/style.styl\"\n```\n\nThe above will automatically recolor the component styles to match your app's accent color.\n\n### If you're not using Stylus\n\nA precompiled version of the default styles is available at `node_modules/boundless/public/skin.css` or `node_modules/boundless/public/skin.css` (minified) for easy drop-in to your project.\n\n## Try it out\n\nHere's an example of using the Boundless \"Button\" component. First, import [Button](/Button) into your desired React file:\n\n```js\nimport {Button} from 'boundless';\n```\n\nBased on the [Button props](/Button#props), we know we can give it children of our choice and hook into the \"pressed\" event by supplying an `onPressed` callback. Here's a minimal functional example:\n\n```jsx\nimport React from 'react';\nimport {Button} from 'boundless';\n\nexport default () => (\n    <Button onPressed={() => alert('BORK! 🐶')}>\n        Learn to Bork\n    </Button>\n)\n```"}});